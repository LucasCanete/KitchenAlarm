
KitchenAlarm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00000c56  00000cea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c56  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800156  00800156  00000d40  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017ee  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a78  00000000  00000000  00002696  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000de8  00000000  00000000  0000310e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000290  00000000  00000000  00003ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000617  00000000  00000000  00004188  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000dca  00000000  00000000  0000479f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c0  00000000  00000000  00005569  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <__vector_5>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 75 02 	jmp	0x4ea	; 0x4ea <__vector_11>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	ba 00       	.word	0x00ba	; ????
  6a:	e3 00       	.word	0x00e3	; ????
  6c:	0c 01       	movw	r0, r24
  6e:	35 01       	movw	r6, r10
  70:	5e 01       	movw	r10, r28
  72:	87 01       	movw	r16, r14
  74:	b0 01       	movw	r22, r0
  76:	d9 01       	movw	r26, r18
  78:	02 02       	muls	r16, r18
  7a:	2b 02       	muls	r18, r27

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d4 e0       	ldi	r29, 0x04	; 4
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e6 e5       	ldi	r30, 0x56	; 86
  90:	fc e0       	ldi	r31, 0x0C	; 12
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a6 35       	cpi	r26, 0x56	; 86
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a6 e5       	ldi	r26, 0x56	; 86
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a0 36       	cpi	r26, 0x60	; 96
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 11 04 	call	0x822	; 0x822 <main>
  b2:	0c 94 29 06 	jmp	0xc52	; 0xc52 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <buzzer_peep>:
#include <Buzzer.h>


void buzzer_peep(volatile uint8_t *ddr_port, uint8_t port_number){
	
	(*ddr_port) |= (1 << port_number);
  ba:	fc 01       	movw	r30, r24
  bc:	40 81       	ld	r20, Z
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <buzzer_peep+0xe>
  c4:	22 0f       	add	r18, r18
  c6:	33 1f       	adc	r19, r19
  c8:	6a 95       	dec	r22
  ca:	e2 f7       	brpl	.-8      	; 0xc4 <buzzer_peep+0xa>
  cc:	24 2b       	or	r18, r20
  ce:	20 83       	st	Z, r18
  d0:	08 95       	ret

000000d2 <buzzer_stop>:
	
};

void buzzer_stop(volatile uint8_t *ddr_port, uint8_t port_number){
  d2:	fc 01       	movw	r30, r24
	
	(*ddr_port) &= ~( 1 << port_number);
  d4:	90 81       	ld	r25, Z
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	30 e0       	ldi	r19, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <buzzer_stop+0xe>
  dc:	22 0f       	add	r18, r18
  de:	33 1f       	adc	r19, r19
  e0:	6a 95       	dec	r22
  e2:	e2 f7       	brpl	.-8      	; 0xdc <buzzer_stop+0xa>
  e4:	20 95       	com	r18
  e6:	29 23       	and	r18, r25
  e8:	20 83       	st	Z, r18
  ea:	08 95       	ret

000000ec <SevSeg_display_digit>:
 *  Author: User
 */ 
#include <SevSeg.h>


void SevSeg_display_digit(volatile uint8_t *port,uint8_t dig){
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	c6 54       	subi	r28, 0x46	; 70
  f6:	d1 09       	sbc	r29, r1
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	f8 94       	cli
  fc:	de bf       	out	0x3e, r29	; 62
  fe:	0f be       	out	0x3f, r0	; 63
 100:	cd bf       	out	0x3d, r28	; 61
	uint8_t segment[10][7] = {
 102:	26 e4       	ldi	r18, 0x46	; 70
 104:	e0 e0       	ldi	r30, 0x00	; 0
 106:	f1 e0       	ldi	r31, 0x01	; 1
 108:	de 01       	movw	r26, r28
 10a:	11 96       	adiw	r26, 0x01	; 1
 10c:	01 90       	ld	r0, Z+
 10e:	0d 92       	st	X+, r0
 110:	2a 95       	dec	r18
 112:	e1 f7       	brne	.-8      	; 0x10c <SevSeg_display_digit+0x20>
		{0,0,0,1,1,1,1}, //7
		{0,0,0,0,0,0,0}, //8
		{0,0,0,1,1,0,0}, //9
		
	};
	switch(dig){
 114:	46 2f       	mov	r20, r22
 116:	50 e0       	ldi	r21, 0x00	; 0
 118:	4a 30       	cpi	r20, 0x0A	; 10
 11a:	51 05       	cpc	r21, r1
 11c:	08 f0       	brcs	.+2      	; 0x120 <SevSeg_display_digit+0x34>
 11e:	9e c1       	rjmp	.+828    	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
 120:	fa 01       	movw	r30, r20
 122:	ec 5c       	subi	r30, 0xCC	; 204
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	0c 94 23 06 	jmp	0xc46	; 0xc46 <__tablejump2__>
		case 0:
		for (uint8_t i = 0; i<7; i++){
			if(segment[0][i]==0) *port &= ~(1<<i);
 12a:	e1 e0       	ldi	r30, 0x01	; 1
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	ec 0f       	add	r30, r28
 130:	fd 1f       	adc	r31, r29
 132:	e2 0f       	add	r30, r18
 134:	f1 1d       	adc	r31, r1
 136:	30 81       	ld	r19, Z
 138:	31 11       	cpse	r19, r1
 13a:	0e c0       	rjmp	.+28     	; 0x158 <SevSeg_display_digit+0x6c>
 13c:	fc 01       	movw	r30, r24
 13e:	30 81       	ld	r19, Z
 140:	41 e0       	ldi	r20, 0x01	; 1
 142:	50 e0       	ldi	r21, 0x00	; 0
 144:	02 2e       	mov	r0, r18
 146:	02 c0       	rjmp	.+4      	; 0x14c <SevSeg_display_digit+0x60>
 148:	44 0f       	add	r20, r20
 14a:	55 1f       	adc	r21, r21
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <SevSeg_display_digit+0x5c>
 150:	40 95       	com	r20
 152:	43 23       	and	r20, r19
 154:	40 83       	st	Z, r20
 156:	0c c0       	rjmp	.+24     	; 0x170 <SevSeg_display_digit+0x84>
			else *port |= (1<<i);
 158:	fc 01       	movw	r30, r24
 15a:	30 81       	ld	r19, Z
 15c:	41 e0       	ldi	r20, 0x01	; 1
 15e:	50 e0       	ldi	r21, 0x00	; 0
 160:	02 2e       	mov	r0, r18
 162:	02 c0       	rjmp	.+4      	; 0x168 <SevSeg_display_digit+0x7c>
 164:	44 0f       	add	r20, r20
 166:	55 1f       	adc	r21, r21
 168:	0a 94       	dec	r0
 16a:	e2 f7       	brpl	.-8      	; 0x164 <SevSeg_display_digit+0x78>
 16c:	43 2b       	or	r20, r19
 16e:	40 83       	st	Z, r20
		{0,0,0,1,1,0,0}, //9
		
	};
	switch(dig){
		case 0:
		for (uint8_t i = 0; i<7; i++){
 170:	2f 5f       	subi	r18, 0xFF	; 255
 172:	01 c0       	rjmp	.+2      	; 0x176 <SevSeg_display_digit+0x8a>
		{0,0,0,1,1,1,1}, //7
		{0,0,0,0,0,0,0}, //8
		{0,0,0,1,1,0,0}, //9
		
	};
	switch(dig){
 174:	20 e0       	ldi	r18, 0x00	; 0
		case 0:
		for (uint8_t i = 0; i<7; i++){
 176:	27 30       	cpi	r18, 0x07	; 7
 178:	c0 f2       	brcs	.-80     	; 0x12a <SevSeg_display_digit+0x3e>
 17a:	70 c1       	rjmp	.+736    	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
			else *port |= (1<<i);
		}
		break;
		case 1:
		for (uint8_t i = 0; i<7; i++){
			if(segment[1][i]==0) *port &= ~(1<<i);
 17c:	e8 e0       	ldi	r30, 0x08	; 8
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	ec 0f       	add	r30, r28
 182:	fd 1f       	adc	r31, r29
 184:	e2 0f       	add	r30, r18
 186:	f1 1d       	adc	r31, r1
 188:	30 81       	ld	r19, Z
 18a:	31 11       	cpse	r19, r1
 18c:	0e c0       	rjmp	.+28     	; 0x1aa <SevSeg_display_digit+0xbe>
 18e:	fc 01       	movw	r30, r24
 190:	30 81       	ld	r19, Z
 192:	41 e0       	ldi	r20, 0x01	; 1
 194:	50 e0       	ldi	r21, 0x00	; 0
 196:	02 2e       	mov	r0, r18
 198:	02 c0       	rjmp	.+4      	; 0x19e <SevSeg_display_digit+0xb2>
 19a:	44 0f       	add	r20, r20
 19c:	55 1f       	adc	r21, r21
 19e:	0a 94       	dec	r0
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <SevSeg_display_digit+0xae>
 1a2:	40 95       	com	r20
 1a4:	43 23       	and	r20, r19
 1a6:	40 83       	st	Z, r20
 1a8:	0c c0       	rjmp	.+24     	; 0x1c2 <SevSeg_display_digit+0xd6>
			else *port |= (1<<i);
 1aa:	fc 01       	movw	r30, r24
 1ac:	30 81       	ld	r19, Z
 1ae:	41 e0       	ldi	r20, 0x01	; 1
 1b0:	50 e0       	ldi	r21, 0x00	; 0
 1b2:	02 2e       	mov	r0, r18
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <SevSeg_display_digit+0xce>
 1b6:	44 0f       	add	r20, r20
 1b8:	55 1f       	adc	r21, r21
 1ba:	0a 94       	dec	r0
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <SevSeg_display_digit+0xca>
 1be:	43 2b       	or	r20, r19
 1c0:	40 83       	st	Z, r20
			if(segment[0][i]==0) *port &= ~(1<<i);
			else *port |= (1<<i);
		}
		break;
		case 1:
		for (uint8_t i = 0; i<7; i++){
 1c2:	2f 5f       	subi	r18, 0xFF	; 255
 1c4:	01 c0       	rjmp	.+2      	; 0x1c8 <SevSeg_display_digit+0xdc>
		{0,0,0,1,1,1,1}, //7
		{0,0,0,0,0,0,0}, //8
		{0,0,0,1,1,0,0}, //9
		
	};
	switch(dig){
 1c6:	20 e0       	ldi	r18, 0x00	; 0
			if(segment[0][i]==0) *port &= ~(1<<i);
			else *port |= (1<<i);
		}
		break;
		case 1:
		for (uint8_t i = 0; i<7; i++){
 1c8:	27 30       	cpi	r18, 0x07	; 7
 1ca:	c0 f2       	brcs	.-80     	; 0x17c <SevSeg_display_digit+0x90>
 1cc:	47 c1       	rjmp	.+654    	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
			else *port |= (1<<i);
		}
		break;
		case 2:
		for (uint8_t i = 0; i<7; i++){
			if(segment[2][i]==0) *port &= ~(1<<i);
 1ce:	ef e0       	ldi	r30, 0x0F	; 15
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	ec 0f       	add	r30, r28
 1d4:	fd 1f       	adc	r31, r29
 1d6:	e2 0f       	add	r30, r18
 1d8:	f1 1d       	adc	r31, r1
 1da:	30 81       	ld	r19, Z
 1dc:	31 11       	cpse	r19, r1
 1de:	0e c0       	rjmp	.+28     	; 0x1fc <SevSeg_display_digit+0x110>
 1e0:	fc 01       	movw	r30, r24
 1e2:	30 81       	ld	r19, Z
 1e4:	41 e0       	ldi	r20, 0x01	; 1
 1e6:	50 e0       	ldi	r21, 0x00	; 0
 1e8:	02 2e       	mov	r0, r18
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <SevSeg_display_digit+0x104>
 1ec:	44 0f       	add	r20, r20
 1ee:	55 1f       	adc	r21, r21
 1f0:	0a 94       	dec	r0
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <SevSeg_display_digit+0x100>
 1f4:	40 95       	com	r20
 1f6:	43 23       	and	r20, r19
 1f8:	40 83       	st	Z, r20
 1fa:	0c c0       	rjmp	.+24     	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
			else *port |= (1<<i);
 1fc:	fc 01       	movw	r30, r24
 1fe:	30 81       	ld	r19, Z
 200:	41 e0       	ldi	r20, 0x01	; 1
 202:	50 e0       	ldi	r21, 0x00	; 0
 204:	02 2e       	mov	r0, r18
 206:	02 c0       	rjmp	.+4      	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
 208:	44 0f       	add	r20, r20
 20a:	55 1f       	adc	r21, r21
 20c:	0a 94       	dec	r0
 20e:	e2 f7       	brpl	.-8      	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
 210:	43 2b       	or	r20, r19
 212:	40 83       	st	Z, r20
			if(segment[1][i]==0) *port &= ~(1<<i);
			else *port |= (1<<i);
		}
		break;
		case 2:
		for (uint8_t i = 0; i<7; i++){
 214:	2f 5f       	subi	r18, 0xFF	; 255
 216:	01 c0       	rjmp	.+2      	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
		{0,0,0,1,1,1,1}, //7
		{0,0,0,0,0,0,0}, //8
		{0,0,0,1,1,0,0}, //9
		
	};
	switch(dig){
 218:	20 e0       	ldi	r18, 0x00	; 0
			if(segment[1][i]==0) *port &= ~(1<<i);
			else *port |= (1<<i);
		}
		break;
		case 2:
		for (uint8_t i = 0; i<7; i++){
 21a:	27 30       	cpi	r18, 0x07	; 7
 21c:	c0 f2       	brcs	.-80     	; 0x1ce <SevSeg_display_digit+0xe2>
 21e:	1e c1       	rjmp	.+572    	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
			else *port |= (1<<i);
		}
		break;
		case 3:
		for (uint8_t i = 0; i<7; i++){
			if(segment[3][i]==0) *port &= ~(1<<i);
 220:	e6 e1       	ldi	r30, 0x16	; 22
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	ec 0f       	add	r30, r28
 226:	fd 1f       	adc	r31, r29
 228:	e2 0f       	add	r30, r18
 22a:	f1 1d       	adc	r31, r1
 22c:	30 81       	ld	r19, Z
 22e:	31 11       	cpse	r19, r1
 230:	0e c0       	rjmp	.+28     	; 0x24e <__EEPROM_REGION_LENGTH__+0x4e>
 232:	fc 01       	movw	r30, r24
 234:	30 81       	ld	r19, Z
 236:	41 e0       	ldi	r20, 0x01	; 1
 238:	50 e0       	ldi	r21, 0x00	; 0
 23a:	02 2e       	mov	r0, r18
 23c:	02 c0       	rjmp	.+4      	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
 23e:	44 0f       	add	r20, r20
 240:	55 1f       	adc	r21, r21
 242:	0a 94       	dec	r0
 244:	e2 f7       	brpl	.-8      	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
 246:	40 95       	com	r20
 248:	43 23       	and	r20, r19
 24a:	40 83       	st	Z, r20
 24c:	0c c0       	rjmp	.+24     	; 0x266 <__EEPROM_REGION_LENGTH__+0x66>
			else *port |= (1<<i);
 24e:	fc 01       	movw	r30, r24
 250:	30 81       	ld	r19, Z
 252:	41 e0       	ldi	r20, 0x01	; 1
 254:	50 e0       	ldi	r21, 0x00	; 0
 256:	02 2e       	mov	r0, r18
 258:	02 c0       	rjmp	.+4      	; 0x25e <__EEPROM_REGION_LENGTH__+0x5e>
 25a:	44 0f       	add	r20, r20
 25c:	55 1f       	adc	r21, r21
 25e:	0a 94       	dec	r0
 260:	e2 f7       	brpl	.-8      	; 0x25a <__EEPROM_REGION_LENGTH__+0x5a>
 262:	43 2b       	or	r20, r19
 264:	40 83       	st	Z, r20
			if(segment[2][i]==0) *port &= ~(1<<i);
			else *port |= (1<<i);
		}
		break;
		case 3:
		for (uint8_t i = 0; i<7; i++){
 266:	2f 5f       	subi	r18, 0xFF	; 255
 268:	01 c0       	rjmp	.+2      	; 0x26c <__EEPROM_REGION_LENGTH__+0x6c>
		{0,0,0,1,1,1,1}, //7
		{0,0,0,0,0,0,0}, //8
		{0,0,0,1,1,0,0}, //9
		
	};
	switch(dig){
 26a:	20 e0       	ldi	r18, 0x00	; 0
			if(segment[2][i]==0) *port &= ~(1<<i);
			else *port |= (1<<i);
		}
		break;
		case 3:
		for (uint8_t i = 0; i<7; i++){
 26c:	27 30       	cpi	r18, 0x07	; 7
 26e:	c0 f2       	brcs	.-80     	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
 270:	f5 c0       	rjmp	.+490    	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
			else *port |= (1<<i);
		}
		break;
		case 4:
		for (uint8_t i = 0; i<7; i++){
			if(segment[4][i]==0) *port &= ~(1<<i);
 272:	ed e1       	ldi	r30, 0x1D	; 29
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	ec 0f       	add	r30, r28
 278:	fd 1f       	adc	r31, r29
 27a:	e2 0f       	add	r30, r18
 27c:	f1 1d       	adc	r31, r1
 27e:	30 81       	ld	r19, Z
 280:	31 11       	cpse	r19, r1
 282:	0e c0       	rjmp	.+28     	; 0x2a0 <__EEPROM_REGION_LENGTH__+0xa0>
 284:	fc 01       	movw	r30, r24
 286:	30 81       	ld	r19, Z
 288:	41 e0       	ldi	r20, 0x01	; 1
 28a:	50 e0       	ldi	r21, 0x00	; 0
 28c:	02 2e       	mov	r0, r18
 28e:	02 c0       	rjmp	.+4      	; 0x294 <__EEPROM_REGION_LENGTH__+0x94>
 290:	44 0f       	add	r20, r20
 292:	55 1f       	adc	r21, r21
 294:	0a 94       	dec	r0
 296:	e2 f7       	brpl	.-8      	; 0x290 <__EEPROM_REGION_LENGTH__+0x90>
 298:	40 95       	com	r20
 29a:	43 23       	and	r20, r19
 29c:	40 83       	st	Z, r20
 29e:	0c c0       	rjmp	.+24     	; 0x2b8 <__EEPROM_REGION_LENGTH__+0xb8>
			else *port |= (1<<i);
 2a0:	fc 01       	movw	r30, r24
 2a2:	30 81       	ld	r19, Z
 2a4:	41 e0       	ldi	r20, 0x01	; 1
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	02 2e       	mov	r0, r18
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <__EEPROM_REGION_LENGTH__+0xb0>
 2ac:	44 0f       	add	r20, r20
 2ae:	55 1f       	adc	r21, r21
 2b0:	0a 94       	dec	r0
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <__EEPROM_REGION_LENGTH__+0xac>
 2b4:	43 2b       	or	r20, r19
 2b6:	40 83       	st	Z, r20
			if(segment[3][i]==0) *port &= ~(1<<i);
			else *port |= (1<<i);
		}
		break;
		case 4:
		for (uint8_t i = 0; i<7; i++){
 2b8:	2f 5f       	subi	r18, 0xFF	; 255
 2ba:	01 c0       	rjmp	.+2      	; 0x2be <__EEPROM_REGION_LENGTH__+0xbe>
		{0,0,0,1,1,1,1}, //7
		{0,0,0,0,0,0,0}, //8
		{0,0,0,1,1,0,0}, //9
		
	};
	switch(dig){
 2bc:	20 e0       	ldi	r18, 0x00	; 0
			if(segment[3][i]==0) *port &= ~(1<<i);
			else *port |= (1<<i);
		}
		break;
		case 4:
		for (uint8_t i = 0; i<7; i++){
 2be:	27 30       	cpi	r18, 0x07	; 7
 2c0:	c0 f2       	brcs	.-80     	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
 2c2:	cc c0       	rjmp	.+408    	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
			else *port |= (1<<i);
		}
		break;
		case 5:
		for (uint8_t i = 0; i<7; i++){
			if(segment[5][i]==0) *port &= ~(1<<i);
 2c4:	e4 e2       	ldi	r30, 0x24	; 36
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	ec 0f       	add	r30, r28
 2ca:	fd 1f       	adc	r31, r29
 2cc:	e2 0f       	add	r30, r18
 2ce:	f1 1d       	adc	r31, r1
 2d0:	30 81       	ld	r19, Z
 2d2:	31 11       	cpse	r19, r1
 2d4:	0e c0       	rjmp	.+28     	; 0x2f2 <__EEPROM_REGION_LENGTH__+0xf2>
 2d6:	fc 01       	movw	r30, r24
 2d8:	30 81       	ld	r19, Z
 2da:	41 e0       	ldi	r20, 0x01	; 1
 2dc:	50 e0       	ldi	r21, 0x00	; 0
 2de:	02 2e       	mov	r0, r18
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <__EEPROM_REGION_LENGTH__+0xe6>
 2e2:	44 0f       	add	r20, r20
 2e4:	55 1f       	adc	r21, r21
 2e6:	0a 94       	dec	r0
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <__EEPROM_REGION_LENGTH__+0xe2>
 2ea:	40 95       	com	r20
 2ec:	43 23       	and	r20, r19
 2ee:	40 83       	st	Z, r20
 2f0:	0c c0       	rjmp	.+24     	; 0x30a <__EEPROM_REGION_LENGTH__+0x10a>
			else *port |= (1<<i);
 2f2:	fc 01       	movw	r30, r24
 2f4:	30 81       	ld	r19, Z
 2f6:	41 e0       	ldi	r20, 0x01	; 1
 2f8:	50 e0       	ldi	r21, 0x00	; 0
 2fa:	02 2e       	mov	r0, r18
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <__EEPROM_REGION_LENGTH__+0x102>
 2fe:	44 0f       	add	r20, r20
 300:	55 1f       	adc	r21, r21
 302:	0a 94       	dec	r0
 304:	e2 f7       	brpl	.-8      	; 0x2fe <__EEPROM_REGION_LENGTH__+0xfe>
 306:	43 2b       	or	r20, r19
 308:	40 83       	st	Z, r20
			if(segment[4][i]==0) *port &= ~(1<<i);
			else *port |= (1<<i);
		}
		break;
		case 5:
		for (uint8_t i = 0; i<7; i++){
 30a:	2f 5f       	subi	r18, 0xFF	; 255
 30c:	01 c0       	rjmp	.+2      	; 0x310 <__EEPROM_REGION_LENGTH__+0x110>
		{0,0,0,1,1,1,1}, //7
		{0,0,0,0,0,0,0}, //8
		{0,0,0,1,1,0,0}, //9
		
	};
	switch(dig){
 30e:	20 e0       	ldi	r18, 0x00	; 0
			if(segment[4][i]==0) *port &= ~(1<<i);
			else *port |= (1<<i);
		}
		break;
		case 5:
		for (uint8_t i = 0; i<7; i++){
 310:	27 30       	cpi	r18, 0x07	; 7
 312:	c0 f2       	brcs	.-80     	; 0x2c4 <__EEPROM_REGION_LENGTH__+0xc4>
 314:	a3 c0       	rjmp	.+326    	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
			else *port |= (1<<i);
		}
		break;
		case 6:
		for (uint8_t i = 0; i<7; i++){
			if(segment[6][i]==0) *port &= ~(1<<i);
 316:	eb e2       	ldi	r30, 0x2B	; 43
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	ec 0f       	add	r30, r28
 31c:	fd 1f       	adc	r31, r29
 31e:	e2 0f       	add	r30, r18
 320:	f1 1d       	adc	r31, r1
 322:	30 81       	ld	r19, Z
 324:	31 11       	cpse	r19, r1
 326:	0e c0       	rjmp	.+28     	; 0x344 <__EEPROM_REGION_LENGTH__+0x144>
 328:	fc 01       	movw	r30, r24
 32a:	30 81       	ld	r19, Z
 32c:	41 e0       	ldi	r20, 0x01	; 1
 32e:	50 e0       	ldi	r21, 0x00	; 0
 330:	02 2e       	mov	r0, r18
 332:	02 c0       	rjmp	.+4      	; 0x338 <__EEPROM_REGION_LENGTH__+0x138>
 334:	44 0f       	add	r20, r20
 336:	55 1f       	adc	r21, r21
 338:	0a 94       	dec	r0
 33a:	e2 f7       	brpl	.-8      	; 0x334 <__EEPROM_REGION_LENGTH__+0x134>
 33c:	40 95       	com	r20
 33e:	43 23       	and	r20, r19
 340:	40 83       	st	Z, r20
 342:	0c c0       	rjmp	.+24     	; 0x35c <__EEPROM_REGION_LENGTH__+0x15c>
			else *port |= (1<<i);
 344:	fc 01       	movw	r30, r24
 346:	30 81       	ld	r19, Z
 348:	41 e0       	ldi	r20, 0x01	; 1
 34a:	50 e0       	ldi	r21, 0x00	; 0
 34c:	02 2e       	mov	r0, r18
 34e:	02 c0       	rjmp	.+4      	; 0x354 <__EEPROM_REGION_LENGTH__+0x154>
 350:	44 0f       	add	r20, r20
 352:	55 1f       	adc	r21, r21
 354:	0a 94       	dec	r0
 356:	e2 f7       	brpl	.-8      	; 0x350 <__EEPROM_REGION_LENGTH__+0x150>
 358:	43 2b       	or	r20, r19
 35a:	40 83       	st	Z, r20
			if(segment[5][i]==0) *port &= ~(1<<i);
			else *port |= (1<<i);
		}
		break;
		case 6:
		for (uint8_t i = 0; i<7; i++){
 35c:	2f 5f       	subi	r18, 0xFF	; 255
 35e:	01 c0       	rjmp	.+2      	; 0x362 <__EEPROM_REGION_LENGTH__+0x162>
		{0,0,0,1,1,1,1}, //7
		{0,0,0,0,0,0,0}, //8
		{0,0,0,1,1,0,0}, //9
		
	};
	switch(dig){
 360:	20 e0       	ldi	r18, 0x00	; 0
			if(segment[5][i]==0) *port &= ~(1<<i);
			else *port |= (1<<i);
		}
		break;
		case 6:
		for (uint8_t i = 0; i<7; i++){
 362:	27 30       	cpi	r18, 0x07	; 7
 364:	c0 f2       	brcs	.-80     	; 0x316 <__EEPROM_REGION_LENGTH__+0x116>
 366:	7a c0       	rjmp	.+244    	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
			else *port |= (1<<i);
		}
		break;
		case 7:
		for (uint8_t i = 0; i<7; i++){
			if(segment[7][i]==0) *port &= ~(1<<i);
 368:	e2 e3       	ldi	r30, 0x32	; 50
 36a:	f0 e0       	ldi	r31, 0x00	; 0
 36c:	ec 0f       	add	r30, r28
 36e:	fd 1f       	adc	r31, r29
 370:	e2 0f       	add	r30, r18
 372:	f1 1d       	adc	r31, r1
 374:	30 81       	ld	r19, Z
 376:	31 11       	cpse	r19, r1
 378:	0e c0       	rjmp	.+28     	; 0x396 <__EEPROM_REGION_LENGTH__+0x196>
 37a:	fc 01       	movw	r30, r24
 37c:	30 81       	ld	r19, Z
 37e:	41 e0       	ldi	r20, 0x01	; 1
 380:	50 e0       	ldi	r21, 0x00	; 0
 382:	02 2e       	mov	r0, r18
 384:	02 c0       	rjmp	.+4      	; 0x38a <__EEPROM_REGION_LENGTH__+0x18a>
 386:	44 0f       	add	r20, r20
 388:	55 1f       	adc	r21, r21
 38a:	0a 94       	dec	r0
 38c:	e2 f7       	brpl	.-8      	; 0x386 <__EEPROM_REGION_LENGTH__+0x186>
 38e:	40 95       	com	r20
 390:	43 23       	and	r20, r19
 392:	40 83       	st	Z, r20
 394:	0c c0       	rjmp	.+24     	; 0x3ae <__EEPROM_REGION_LENGTH__+0x1ae>
			else *port |= (1<<i);
 396:	fc 01       	movw	r30, r24
 398:	30 81       	ld	r19, Z
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	50 e0       	ldi	r21, 0x00	; 0
 39e:	02 2e       	mov	r0, r18
 3a0:	02 c0       	rjmp	.+4      	; 0x3a6 <__EEPROM_REGION_LENGTH__+0x1a6>
 3a2:	44 0f       	add	r20, r20
 3a4:	55 1f       	adc	r21, r21
 3a6:	0a 94       	dec	r0
 3a8:	e2 f7       	brpl	.-8      	; 0x3a2 <__EEPROM_REGION_LENGTH__+0x1a2>
 3aa:	43 2b       	or	r20, r19
 3ac:	40 83       	st	Z, r20
			if(segment[6][i]==0) *port &= ~(1<<i);
			else *port |= (1<<i);
		}
		break;
		case 7:
		for (uint8_t i = 0; i<7; i++){
 3ae:	2f 5f       	subi	r18, 0xFF	; 255
 3b0:	01 c0       	rjmp	.+2      	; 0x3b4 <__EEPROM_REGION_LENGTH__+0x1b4>
		{0,0,0,1,1,1,1}, //7
		{0,0,0,0,0,0,0}, //8
		{0,0,0,1,1,0,0}, //9
		
	};
	switch(dig){
 3b2:	20 e0       	ldi	r18, 0x00	; 0
			if(segment[6][i]==0) *port &= ~(1<<i);
			else *port |= (1<<i);
		}
		break;
		case 7:
		for (uint8_t i = 0; i<7; i++){
 3b4:	27 30       	cpi	r18, 0x07	; 7
 3b6:	c0 f2       	brcs	.-80     	; 0x368 <__EEPROM_REGION_LENGTH__+0x168>
 3b8:	51 c0       	rjmp	.+162    	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
			else *port |= (1<<i);
		}
		break;
		case 8:
		for (uint8_t i = 0; i<7; i++){
			if(segment[8][i]==0) *port &= ~(1<<i);
 3ba:	e9 e3       	ldi	r30, 0x39	; 57
 3bc:	f0 e0       	ldi	r31, 0x00	; 0
 3be:	ec 0f       	add	r30, r28
 3c0:	fd 1f       	adc	r31, r29
 3c2:	e2 0f       	add	r30, r18
 3c4:	f1 1d       	adc	r31, r1
 3c6:	30 81       	ld	r19, Z
 3c8:	31 11       	cpse	r19, r1
 3ca:	0e c0       	rjmp	.+28     	; 0x3e8 <__EEPROM_REGION_LENGTH__+0x1e8>
 3cc:	fc 01       	movw	r30, r24
 3ce:	30 81       	ld	r19, Z
 3d0:	41 e0       	ldi	r20, 0x01	; 1
 3d2:	50 e0       	ldi	r21, 0x00	; 0
 3d4:	02 2e       	mov	r0, r18
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <__EEPROM_REGION_LENGTH__+0x1dc>
 3d8:	44 0f       	add	r20, r20
 3da:	55 1f       	adc	r21, r21
 3dc:	0a 94       	dec	r0
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <__EEPROM_REGION_LENGTH__+0x1d8>
 3e0:	40 95       	com	r20
 3e2:	43 23       	and	r20, r19
 3e4:	40 83       	st	Z, r20
 3e6:	0c c0       	rjmp	.+24     	; 0x400 <__DATA_REGION_LENGTH__>
			else *port |= (1<<i);
 3e8:	fc 01       	movw	r30, r24
 3ea:	30 81       	ld	r19, Z
 3ec:	41 e0       	ldi	r20, 0x01	; 1
 3ee:	50 e0       	ldi	r21, 0x00	; 0
 3f0:	02 2e       	mov	r0, r18
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <__EEPROM_REGION_LENGTH__+0x1f8>
 3f4:	44 0f       	add	r20, r20
 3f6:	55 1f       	adc	r21, r21
 3f8:	0a 94       	dec	r0
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <__EEPROM_REGION_LENGTH__+0x1f4>
 3fc:	43 2b       	or	r20, r19
 3fe:	40 83       	st	Z, r20
			if(segment[7][i]==0) *port &= ~(1<<i);
			else *port |= (1<<i);
		}
		break;
		case 8:
		for (uint8_t i = 0; i<7; i++){
 400:	2f 5f       	subi	r18, 0xFF	; 255
 402:	01 c0       	rjmp	.+2      	; 0x406 <__DATA_REGION_LENGTH__+0x6>
		{0,0,0,1,1,1,1}, //7
		{0,0,0,0,0,0,0}, //8
		{0,0,0,1,1,0,0}, //9
		
	};
	switch(dig){
 404:	20 e0       	ldi	r18, 0x00	; 0
			if(segment[7][i]==0) *port &= ~(1<<i);
			else *port |= (1<<i);
		}
		break;
		case 8:
		for (uint8_t i = 0; i<7; i++){
 406:	27 30       	cpi	r18, 0x07	; 7
 408:	c0 f2       	brcs	.-80     	; 0x3ba <__EEPROM_REGION_LENGTH__+0x1ba>
 40a:	28 c0       	rjmp	.+80     	; 0x45c <__DATA_REGION_LENGTH__+0x5c>
			else *port |= (1<<i);
		}
		break;
		case 9:
		for (uint8_t i = 0; i<7; i++){
			if(segment[9][i]==0) *port &= ~(1<<i);
 40c:	e0 e4       	ldi	r30, 0x40	; 64
 40e:	f0 e0       	ldi	r31, 0x00	; 0
 410:	ec 0f       	add	r30, r28
 412:	fd 1f       	adc	r31, r29
 414:	e2 0f       	add	r30, r18
 416:	f1 1d       	adc	r31, r1
 418:	30 81       	ld	r19, Z
 41a:	31 11       	cpse	r19, r1
 41c:	0e c0       	rjmp	.+28     	; 0x43a <__DATA_REGION_LENGTH__+0x3a>
 41e:	fc 01       	movw	r30, r24
 420:	30 81       	ld	r19, Z
 422:	41 e0       	ldi	r20, 0x01	; 1
 424:	50 e0       	ldi	r21, 0x00	; 0
 426:	02 2e       	mov	r0, r18
 428:	02 c0       	rjmp	.+4      	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
 42a:	44 0f       	add	r20, r20
 42c:	55 1f       	adc	r21, r21
 42e:	0a 94       	dec	r0
 430:	e2 f7       	brpl	.-8      	; 0x42a <__DATA_REGION_LENGTH__+0x2a>
 432:	40 95       	com	r20
 434:	43 23       	and	r20, r19
 436:	40 83       	st	Z, r20
 438:	0c c0       	rjmp	.+24     	; 0x452 <__DATA_REGION_LENGTH__+0x52>
			else *port |= (1<<i);
 43a:	fc 01       	movw	r30, r24
 43c:	30 81       	ld	r19, Z
 43e:	41 e0       	ldi	r20, 0x01	; 1
 440:	50 e0       	ldi	r21, 0x00	; 0
 442:	02 2e       	mov	r0, r18
 444:	02 c0       	rjmp	.+4      	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
 446:	44 0f       	add	r20, r20
 448:	55 1f       	adc	r21, r21
 44a:	0a 94       	dec	r0
 44c:	e2 f7       	brpl	.-8      	; 0x446 <__DATA_REGION_LENGTH__+0x46>
 44e:	43 2b       	or	r20, r19
 450:	40 83       	st	Z, r20
			if(segment[8][i]==0) *port &= ~(1<<i);
			else *port |= (1<<i);
		}
		break;
		case 9:
		for (uint8_t i = 0; i<7; i++){
 452:	2f 5f       	subi	r18, 0xFF	; 255
 454:	01 c0       	rjmp	.+2      	; 0x458 <__DATA_REGION_LENGTH__+0x58>
		{0,0,0,1,1,1,1}, //7
		{0,0,0,0,0,0,0}, //8
		{0,0,0,1,1,0,0}, //9
		
	};
	switch(dig){
 456:	20 e0       	ldi	r18, 0x00	; 0
			if(segment[8][i]==0) *port &= ~(1<<i);
			else *port |= (1<<i);
		}
		break;
		case 9:
		for (uint8_t i = 0; i<7; i++){
 458:	27 30       	cpi	r18, 0x07	; 7
 45a:	c0 f2       	brcs	.-80     	; 0x40c <__DATA_REGION_LENGTH__+0xc>
			if(segment[9][i]==0) *port &= ~(1<<i);
			else *port |= (1<<i);
		}
		break;
	}
};
 45c:	ca 5b       	subi	r28, 0xBA	; 186
 45e:	df 4f       	sbci	r29, 0xFF	; 255
 460:	0f b6       	in	r0, 0x3f	; 63
 462:	f8 94       	cli
 464:	de bf       	out	0x3e, r29	; 62
 466:	0f be       	out	0x3f, r0	; 63
 468:	cd bf       	out	0x3d, r28	; 61
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	08 95       	ret

00000470 <SevSeg_clear>:

//Turn off all pins from port B
void SevSeg_clear(volatile uint8_t *port){
 470:	fc 01       	movw	r30, r24
	
	for(uint8_t i = 0; i < 7; i++){
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	0c c0       	rjmp	.+24     	; 0x48e <SevSeg_clear+0x1e>
		*port |= (1<<i);
 476:	80 81       	ld	r24, Z
 478:	21 e0       	ldi	r18, 0x01	; 1
 47a:	30 e0       	ldi	r19, 0x00	; 0
 47c:	09 2e       	mov	r0, r25
 47e:	02 c0       	rjmp	.+4      	; 0x484 <SevSeg_clear+0x14>
 480:	22 0f       	add	r18, r18
 482:	33 1f       	adc	r19, r19
 484:	0a 94       	dec	r0
 486:	e2 f7       	brpl	.-8      	; 0x480 <SevSeg_clear+0x10>
 488:	28 2b       	or	r18, r24
 48a:	20 83       	st	Z, r18
};

//Turn off all pins from port B
void SevSeg_clear(volatile uint8_t *port){
	
	for(uint8_t i = 0; i < 7; i++){
 48c:	9f 5f       	subi	r25, 0xFF	; 255
 48e:	97 30       	cpi	r25, 0x07	; 7
 490:	90 f3       	brcs	.-28     	; 0x476 <SevSeg_clear+0x6>
		*port |= (1<<i);
	}
 492:	08 95       	ret

00000494 <initUSART>:

uint8_t receiveByte(void){
	
	while(!(UCSR0A & (1<<RXC0)));/* Wait for data to be received */
	return UDR0;
}
 494:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
 498:	8c e0       	ldi	r24, 0x0C	; 12
 49a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
 49e:	e0 ec       	ldi	r30, 0xC0	; 192
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	80 81       	ld	r24, Z
 4a4:	82 60       	ori	r24, 0x02	; 2
 4a6:	80 83       	st	Z, r24
 4a8:	88 e1       	ldi	r24, 0x18	; 24
 4aa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fc0c1>
 4ae:	86 e0       	ldi	r24, 0x06	; 6
 4b0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fc0c2>
 4b4:	08 95       	ret

000004b6 <transmitByte>:
 4b6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
 4ba:	95 ff       	sbrs	r25, 5
 4bc:	fc cf       	rjmp	.-8      	; 0x4b6 <transmitByte>
 4be:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
 4c2:	08 95       	ret

000004c4 <printString>:
void printString(const char myString []){
 4c4:	0f 93       	push	r16
 4c6:	1f 93       	push	r17
 4c8:	cf 93       	push	r28
 4ca:	8c 01       	movw	r16, r24
	uint8_t i = 0;
 4cc:	c0 e0       	ldi	r28, 0x00	; 0
	while (myString[i]) {
 4ce:	03 c0       	rjmp	.+6      	; 0x4d6 <printString+0x12>
	transmitByte(myString[i]);
 4d0:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <transmitByte>
	i++;
 4d4:	cf 5f       	subi	r28, 0xFF	; 255
	while(!(UCSR0A & (1<<RXC0)));/* Wait for data to be received */
	return UDR0;
}
void printString(const char myString []){
	uint8_t i = 0;
	while (myString[i]) {
 4d6:	f8 01       	movw	r30, r16
 4d8:	ec 0f       	add	r30, r28
 4da:	f1 1d       	adc	r31, r1
 4dc:	80 81       	ld	r24, Z
 4de:	81 11       	cpse	r24, r1
 4e0:	f7 cf       	rjmp	.-18     	; 0x4d0 <printString+0xc>
	transmitByte(myString[i]);
	i++;
	}
}
 4e2:	cf 91       	pop	r28
 4e4:	1f 91       	pop	r17
 4e6:	0f 91       	pop	r16
 4e8:	08 95       	ret

000004ea <__vector_11>:
int8_t ten_sec = 0;
	
int8_t unit_min = 0;
int8_t ten_min = 0;

ISR(TIMER1_COMPA_vect){
 4ea:	1f 92       	push	r1
 4ec:	0f 92       	push	r0
 4ee:	0f b6       	in	r0, 0x3f	; 63
 4f0:	0f 92       	push	r0
 4f2:	11 24       	eor	r1, r1
 4f4:	2f 93       	push	r18
 4f6:	3f 93       	push	r19
 4f8:	4f 93       	push	r20
 4fa:	5f 93       	push	r21
 4fc:	6f 93       	push	r22
 4fe:	7f 93       	push	r23
 500:	8f 93       	push	r24
 502:	9f 93       	push	r25
 504:	af 93       	push	r26
 506:	bf 93       	push	r27
 508:	ef 93       	push	r30
 50a:	ff 93       	push	r31
	
		COUNTER_TIMEOUT++;
 50c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <COUNTER_TIMEOUT>
 510:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <COUNTER_TIMEOUT+0x1>
 514:	01 96       	adiw	r24, 0x01	; 1
 516:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <COUNTER_TIMEOUT+0x1>
 51a:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <COUNTER_TIMEOUT>
		if(alarm_is_set && (unit_min + ten_min + unit_sec+ten_sec > 0)) unit_sec--;
 51e:	20 91 5b 01 	lds	r18, 0x015B	; 0x80015b <alarm_is_set>
 522:	22 23       	and	r18, r18
 524:	f1 f0       	breq	.+60     	; 0x562 <__stack+0x63>
 526:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <unit_min>
 52a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
 52e:	08 2e       	mov	r0, r24
 530:	00 0c       	add	r0, r0
 532:	99 0b       	sbc	r25, r25
 534:	83 0f       	add	r24, r19
 536:	91 1d       	adc	r25, r1
 538:	37 fd       	sbrc	r19, 7
 53a:	9a 95       	dec	r25
 53c:	30 91 59 01 	lds	r19, 0x0159	; 0x800159 <unit_sec>
 540:	83 0f       	add	r24, r19
 542:	91 1d       	adc	r25, r1
 544:	37 fd       	sbrc	r19, 7
 546:	9a 95       	dec	r25
 548:	40 91 58 01 	lds	r20, 0x0158	; 0x800158 <ten_sec>
 54c:	84 0f       	add	r24, r20
 54e:	91 1d       	adc	r25, r1
 550:	47 fd       	sbrc	r20, 7
 552:	9a 95       	dec	r25
 554:	18 16       	cp	r1, r24
 556:	19 06       	cpc	r1, r25
 558:	24 f4       	brge	.+8      	; 0x562 <__stack+0x63>
 55a:	31 50       	subi	r19, 0x01	; 1
 55c:	30 93 59 01 	sts	0x0159, r19	; 0x800159 <unit_sec>
 560:	24 c0       	rjmp	.+72     	; 0x5aa <__stack+0xab>
		 else if(COUNTER_TIMEOUT == 60 && !alarm_is_set && button_layer == 0  ){
 562:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <COUNTER_TIMEOUT>
 566:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <COUNTER_TIMEOUT+0x1>
 56a:	cc 97       	sbiw	r24, 0x3c	; 60
 56c:	f1 f4       	brne	.+60     	; 0x5aa <__stack+0xab>
 56e:	21 11       	cpse	r18, r1
 570:	1c c0       	rjmp	.+56     	; 0x5aa <__stack+0xab>
 572:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <button_layer>
 576:	81 11       	cpse	r24, r1
 578:	18 c0       	rjmp	.+48     	; 0x5aa <__stack+0xab>
	
			SevSeg_clear(&PORTB);
 57a:	85 e2       	ldi	r24, 0x25	; 37
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	0e 94 38 02 	call	0x470	; 0x470 <SevSeg_clear>
			setBit(PORTC,PC4); //deactivate decimal point
 582:	88 b1       	in	r24, 0x08	; 8
 584:	80 61       	ori	r24, 0x10	; 16
 586:	88 b9       	out	0x08, r24	; 8
			COUNTER_TIMEOUT = 0;
 588:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <COUNTER_TIMEOUT+0x1>
 58c:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <COUNTER_TIMEOUT>
			was_sleeping = 1;
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <was_sleeping>
			
			set_sleep_mode(SLEEP_MODE_PWR_DOWN);   // Set power-down sleep mode
 596:	83 b7       	in	r24, 0x33	; 51
 598:	81 7f       	andi	r24, 0xF1	; 241
 59a:	84 60       	ori	r24, 0x04	; 4
 59c:	83 bf       	out	0x33, r24	; 51
			cli(); //cli before sleep enable to avoid interferance with interrupts
 59e:	f8 94       	cli
			sleep_enable();   // Enable sleep mode
 5a0:	83 b7       	in	r24, 0x33	; 51
 5a2:	81 60       	ori	r24, 0x01	; 1
 5a4:	83 bf       	out	0x33, r24	; 51
			sei();
 5a6:	78 94       	sei
			sleep_cpu();
 5a8:	88 95       	sleep
		
		}
		
		

};
 5aa:	ff 91       	pop	r31
 5ac:	ef 91       	pop	r30
 5ae:	bf 91       	pop	r27
 5b0:	af 91       	pop	r26
 5b2:	9f 91       	pop	r25
 5b4:	8f 91       	pop	r24
 5b6:	7f 91       	pop	r23
 5b8:	6f 91       	pop	r22
 5ba:	5f 91       	pop	r21
 5bc:	4f 91       	pop	r20
 5be:	3f 91       	pop	r19
 5c0:	2f 91       	pop	r18
 5c2:	0f 90       	pop	r0
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	0f 90       	pop	r0
 5c8:	1f 90       	pop	r1
 5ca:	18 95       	reti

000005cc <__vector_5>:


ISR(PCINT2_vect ) {
 5cc:	1f 92       	push	r1
 5ce:	0f 92       	push	r0
 5d0:	0f b6       	in	r0, 0x3f	; 63
 5d2:	0f 92       	push	r0
 5d4:	11 24       	eor	r1, r1
 5d6:	2f 93       	push	r18
 5d8:	3f 93       	push	r19
 5da:	4f 93       	push	r20
 5dc:	5f 93       	push	r21
 5de:	6f 93       	push	r22
 5e0:	7f 93       	push	r23
 5e2:	8f 93       	push	r24
 5e4:	9f 93       	push	r25
 5e6:	af 93       	push	r26
 5e8:	bf 93       	push	r27
 5ea:	ef 93       	push	r30
 5ec:	ff 93       	push	r31
	//wake uC up
	beep_activated = false;
 5ee:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <beep_activated>
	printString("waking up!!! \r\n");
 5f2:	86 e4       	ldi	r24, 0x46	; 70
 5f4:	91 e0       	ldi	r25, 0x01	; 1
 5f6:	0e 94 62 02 	call	0x4c4	; 0x4c4 <printString>

}
 5fa:	ff 91       	pop	r31
 5fc:	ef 91       	pop	r30
 5fe:	bf 91       	pop	r27
 600:	af 91       	pop	r26
 602:	9f 91       	pop	r25
 604:	8f 91       	pop	r24
 606:	7f 91       	pop	r23
 608:	6f 91       	pop	r22
 60a:	5f 91       	pop	r21
 60c:	4f 91       	pop	r20
 60e:	3f 91       	pop	r19
 610:	2f 91       	pop	r18
 612:	0f 90       	pop	r0
 614:	0f be       	out	0x3f, r0	; 63
 616:	0f 90       	pop	r0
 618:	1f 90       	pop	r1
 61a:	18 95       	reti

0000061c <UpDownCounterMinute>:


void UpDownCounterMinute(int8_t *minute_unit, int8_t *minute_ten){
 61c:	dc 01       	movw	r26, r24
 61e:	fb 01       	movw	r30, r22

	if(*minute_unit > 9 && *minute_ten != 5) {
 620:	8c 91       	ld	r24, X
 622:	8a 30       	cpi	r24, 0x0A	; 10
 624:	3c f0       	brlt	.+14     	; 0x634 <UpDownCounterMinute+0x18>
 626:	90 81       	ld	r25, Z
 628:	95 30       	cpi	r25, 0x05	; 5
 62a:	21 f0       	breq	.+8      	; 0x634 <UpDownCounterMinute+0x18>
		(*minute_ten)++;
 62c:	9f 5f       	subi	r25, 0xFF	; 255
 62e:	90 83       	st	Z, r25
		*minute_unit = 0;
 630:	1c 92       	st	X, r1
 632:	07 c0       	rjmp	.+14     	; 0x642 <UpDownCounterMinute+0x26>
	}
	else if (*minute_unit < 0){
 634:	88 23       	and	r24, r24
 636:	2c f4       	brge	.+10     	; 0x642 <UpDownCounterMinute+0x26>
		(*minute_ten)--;
 638:	80 81       	ld	r24, Z
 63a:	81 50       	subi	r24, 0x01	; 1
 63c:	80 83       	st	Z, r24
		*minute_unit = 9;
 63e:	89 e0       	ldi	r24, 0x09	; 9
 640:	8c 93       	st	X, r24
		
	}
	if(*minute_ten == 5 && *minute_unit > 9){
 642:	80 81       	ld	r24, Z
 644:	85 30       	cpi	r24, 0x05	; 5
 646:	31 f4       	brne	.+12     	; 0x654 <UpDownCounterMinute+0x38>
 648:	9c 91       	ld	r25, X
 64a:	9a 30       	cpi	r25, 0x0A	; 10
 64c:	1c f0       	brlt	.+6      	; 0x654 <UpDownCounterMinute+0x38>
		*minute_ten = 0;
 64e:	10 82       	st	Z, r1
		*minute_unit = 0;
 650:	1c 92       	st	X, r1
 652:	08 95       	ret
	}
	else if (*minute_ten < 0){
 654:	88 23       	and	r24, r24
 656:	24 f4       	brge	.+8      	; 0x660 <UpDownCounterMinute+0x44>
		*minute_ten = 5;
 658:	85 e0       	ldi	r24, 0x05	; 5
 65a:	80 83       	st	Z, r24
		*minute_unit = 9;
 65c:	89 e0       	ldi	r24, 0x09	; 9
 65e:	8c 93       	st	X, r24
 660:	08 95       	ret

00000662 <UpDownCounterSecond>:
	}
	
};

void UpDownCounterSecond(int8_t *sec_unit, int8_t *sec_ten, int8_t *min_unit ){
 662:	cf 93       	push	r28
 664:	df 93       	push	r29
 666:	dc 01       	movw	r26, r24
 668:	fb 01       	movw	r30, r22


	 if(*sec_unit > 9 && *sec_ten != 5) {
 66a:	8c 91       	ld	r24, X
 66c:	8a 30       	cpi	r24, 0x0A	; 10
 66e:	3c f0       	brlt	.+14     	; 0x67e <UpDownCounterSecond+0x1c>
 670:	90 81       	ld	r25, Z
 672:	95 30       	cpi	r25, 0x05	; 5
 674:	21 f0       	breq	.+8      	; 0x67e <UpDownCounterSecond+0x1c>
		(*sec_ten)++;
 676:	9f 5f       	subi	r25, 0xFF	; 255
 678:	90 83       	st	Z, r25
		*sec_unit = 0;
 67a:	1c 92       	st	X, r1
 67c:	07 c0       	rjmp	.+14     	; 0x68c <UpDownCounterSecond+0x2a>
	}
	else if (*sec_unit < 0){
 67e:	88 23       	and	r24, r24
 680:	2c f4       	brge	.+10     	; 0x68c <UpDownCounterSecond+0x2a>
		(*sec_ten)--;
 682:	80 81       	ld	r24, Z
 684:	81 50       	subi	r24, 0x01	; 1
 686:	80 83       	st	Z, r24
		*sec_unit = 9;
 688:	89 e0       	ldi	r24, 0x09	; 9
 68a:	8c 93       	st	X, r24
		
	}
	
	if(*sec_ten == 5 && *sec_unit > 9){
 68c:	80 81       	ld	r24, Z
 68e:	85 30       	cpi	r24, 0x05	; 5
 690:	51 f4       	brne	.+20     	; 0x6a6 <UpDownCounterSecond+0x44>
 692:	9c 91       	ld	r25, X
 694:	9a 30       	cpi	r25, 0x0A	; 10
 696:	3c f0       	brlt	.+14     	; 0x6a6 <UpDownCounterSecond+0x44>
			(*min_unit)++;
 698:	ea 01       	movw	r28, r20
 69a:	88 81       	ld	r24, Y
 69c:	8f 5f       	subi	r24, 0xFF	; 255
 69e:	88 83       	st	Y, r24
			*sec_ten = 0;
 6a0:	10 82       	st	Z, r1
			*sec_unit = 0;
 6a2:	1c 92       	st	X, r1
 6a4:	0a c0       	rjmp	.+20     	; 0x6ba <UpDownCounterSecond+0x58>
	}
	
	 else if (*sec_ten < 0){
 6a6:	88 23       	and	r24, r24
 6a8:	44 f4       	brge	.+16     	; 0x6ba <UpDownCounterSecond+0x58>
			(*min_unit)--;
 6aa:	ea 01       	movw	r28, r20
 6ac:	88 81       	ld	r24, Y
 6ae:	81 50       	subi	r24, 0x01	; 1
 6b0:	88 83       	st	Y, r24
			*sec_ten = 5;
 6b2:	85 e0       	ldi	r24, 0x05	; 5
 6b4:	80 83       	st	Z, r24
			*sec_unit = 9;
 6b6:	89 e0       	ldi	r24, 0x09	; 9
 6b8:	8c 93       	st	X, r24
	}
	


	
};
 6ba:	df 91       	pop	r29
 6bc:	cf 91       	pop	r28
 6be:	08 95       	ret

000006c0 <alarm_countdown>:


void alarm_countdown(int8_t *ten_min, int8_t *unit_min, int8_t *ten_sec, int8_t *unit_sec){
 6c0:	ef 92       	push	r14
 6c2:	ff 92       	push	r15
 6c4:	0f 93       	push	r16
 6c6:	1f 93       	push	r17
 6c8:	cf 93       	push	r28
 6ca:	df 93       	push	r29
 6cc:	8c 01       	movw	r16, r24
 6ce:	eb 01       	movw	r28, r22
 6d0:	79 01       	movw	r14, r18
	
		//4ms x 250 = 1s
	
		//for(uint8_t i = 0; i <= 120; i++){
			
			setBit(PORTC,PC2);
 6d2:	88 b1       	in	r24, 0x08	; 8
 6d4:	84 60       	ori	r24, 0x04	; 4
 6d6:	88 b9       	out	0x08, r24	; 8
			SevSeg_display_digit(&PORTB,*ten_sec);
 6d8:	fa 01       	movw	r30, r20
 6da:	60 81       	ld	r22, Z
 6dc:	85 e2       	ldi	r24, 0x25	; 37
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	0e 94 76 00 	call	0xec	; 0xec <SevSeg_display_digit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 6e4:	89 ef       	ldi	r24, 0xF9	; 249
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	01 97       	sbiw	r24, 0x01	; 1
 6ea:	f1 f7       	brne	.-4      	; 0x6e8 <alarm_countdown+0x28>
 6ec:	00 c0       	rjmp	.+0      	; 0x6ee <alarm_countdown+0x2e>
 6ee:	00 00       	nop
			_delay_ms(1);
			SevSeg_clear(&PORTB);
 6f0:	85 e2       	ldi	r24, 0x25	; 37
 6f2:	90 e0       	ldi	r25, 0x00	; 0
 6f4:	0e 94 38 02 	call	0x470	; 0x470 <SevSeg_clear>
			clearBit(PORTC,PC2);
 6f8:	88 b1       	in	r24, 0x08	; 8
 6fa:	8b 7f       	andi	r24, 0xFB	; 251
 6fc:	88 b9       	out	0x08, r24	; 8
			
			setBit(PORTC,PC3);
 6fe:	88 b1       	in	r24, 0x08	; 8
 700:	88 60       	ori	r24, 0x08	; 8
 702:	88 b9       	out	0x08, r24	; 8
			SevSeg_display_digit(&PORTB,*unit_sec);
 704:	f7 01       	movw	r30, r14
 706:	60 81       	ld	r22, Z
 708:	85 e2       	ldi	r24, 0x25	; 37
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	0e 94 76 00 	call	0xec	; 0xec <SevSeg_display_digit>
 710:	89 ef       	ldi	r24, 0xF9	; 249
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	01 97       	sbiw	r24, 0x01	; 1
 716:	f1 f7       	brne	.-4      	; 0x714 <alarm_countdown+0x54>
 718:	00 c0       	rjmp	.+0      	; 0x71a <alarm_countdown+0x5a>
 71a:	00 00       	nop
			_delay_ms(1);
			SevSeg_clear(&PORTB);
 71c:	85 e2       	ldi	r24, 0x25	; 37
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	0e 94 38 02 	call	0x470	; 0x470 <SevSeg_clear>
			clearBit(PORTC,PC3);
 724:	88 b1       	in	r24, 0x08	; 8
 726:	87 7f       	andi	r24, 0xF7	; 247
 728:	88 b9       	out	0x08, r24	; 8
			
			setBit(PORTC,PC0);
 72a:	88 b1       	in	r24, 0x08	; 8
 72c:	81 60       	ori	r24, 0x01	; 1
 72e:	88 b9       	out	0x08, r24	; 8
			SevSeg_display_digit(&PORTB,*ten_min);
 730:	f8 01       	movw	r30, r16
 732:	60 81       	ld	r22, Z
 734:	85 e2       	ldi	r24, 0x25	; 37
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	0e 94 76 00 	call	0xec	; 0xec <SevSeg_display_digit>
 73c:	89 ef       	ldi	r24, 0xF9	; 249
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	01 97       	sbiw	r24, 0x01	; 1
 742:	f1 f7       	brne	.-4      	; 0x740 <alarm_countdown+0x80>
 744:	00 c0       	rjmp	.+0      	; 0x746 <alarm_countdown+0x86>
 746:	00 00       	nop
			_delay_ms(1);
			SevSeg_clear(&PORTB);
 748:	85 e2       	ldi	r24, 0x25	; 37
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	0e 94 38 02 	call	0x470	; 0x470 <SevSeg_clear>
			clearBit(PORTC,PC0);
 750:	88 b1       	in	r24, 0x08	; 8
 752:	8e 7f       	andi	r24, 0xFE	; 254
 754:	88 b9       	out	0x08, r24	; 8
			
			setBit(PORTC,PC1);
 756:	88 b1       	in	r24, 0x08	; 8
 758:	82 60       	ori	r24, 0x02	; 2
 75a:	88 b9       	out	0x08, r24	; 8
			SevSeg_display_digit(&PORTB,*unit_min);
 75c:	68 81       	ld	r22, Y
 75e:	85 e2       	ldi	r24, 0x25	; 37
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	0e 94 76 00 	call	0xec	; 0xec <SevSeg_display_digit>
			clearBit(PORTC,PC4);// activate decimal point
 766:	88 b1       	in	r24, 0x08	; 8
 768:	8f 7e       	andi	r24, 0xEF	; 239
 76a:	88 b9       	out	0x08, r24	; 8
 76c:	e9 ef       	ldi	r30, 0xF9	; 249
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	31 97       	sbiw	r30, 0x01	; 1
 772:	f1 f7       	brne	.-4      	; 0x770 <alarm_countdown+0xb0>
 774:	00 c0       	rjmp	.+0      	; 0x776 <alarm_countdown+0xb6>
 776:	00 00       	nop
			_delay_ms(1);
			setBit(PORTC,PC4);// deactivate decimal point
 778:	88 b1       	in	r24, 0x08	; 8
 77a:	80 61       	ori	r24, 0x10	; 16
 77c:	88 b9       	out	0x08, r24	; 8
			SevSeg_clear(&PORTB);
 77e:	85 e2       	ldi	r24, 0x25	; 37
 780:	90 e0       	ldi	r25, 0x00	; 0
 782:	0e 94 38 02 	call	0x470	; 0x470 <SevSeg_clear>
			clearBit(PORTC,PC1);
 786:	88 b1       	in	r24, 0x08	; 8
 788:	8d 7f       	andi	r24, 0xFD	; 253
 78a:	88 b9       	out	0x08, r24	; 8
			
		//}
		//(*unit_sec)--;
	
	
}
 78c:	df 91       	pop	r29
 78e:	cf 91       	pop	r28
 790:	1f 91       	pop	r17
 792:	0f 91       	pop	r16
 794:	ff 90       	pop	r15
 796:	ef 90       	pop	r14
 798:	08 95       	ret

0000079a <rotaryEncoderdirection>:
//returns if rotary is rotating clockwise 1 or counterclockwise 0
uint8_t rotaryEncoderdirection(uint8_t *current_clkstate, uint8_t *last_clkstate){
	uint8_t dir = 3;
	if(*current_clkstate != *last_clkstate && *current_clkstate == 0){
 79a:	fc 01       	movw	r30, r24
 79c:	90 81       	ld	r25, Z
 79e:	fb 01       	movw	r30, r22
 7a0:	80 81       	ld	r24, Z
 7a2:	98 17       	cp	r25, r24
 7a4:	51 f0       	breq	.+20     	; 0x7ba <rotaryEncoderdirection+0x20>
 7a6:	91 11       	cpse	r25, r1
 7a8:	0a c0       	rjmp	.+20     	; 0x7be <rotaryEncoderdirection+0x24>
		uint8_t dt_state = bit_is_set(PIND,DT);
 7aa:	89 b1       	in	r24, 0x09	; 9
 7ac:	80 74       	andi	r24, 0x40	; 64
		if(dt_state != *current_clkstate){//clockwise
 7ae:	98 13       	cpse	r25, r24
 7b0:	08 c0       	rjmp	.+16     	; 0x7c2 <rotaryEncoderdirection+0x28>
			//printString("Horario \r\n"); 
			dir = 1;
			
			} 
		else if(dt_state == *current_clkstate){//counterclockwise
 7b2:	98 17       	cp	r25, r24
 7b4:	41 f0       	breq	.+16     	; 0x7c6 <rotaryEncoderdirection+0x2c>
	
	
}
//returns if rotary is rotating clockwise 1 or counterclockwise 0
uint8_t rotaryEncoderdirection(uint8_t *current_clkstate, uint8_t *last_clkstate){
	uint8_t dir = 3;
 7b6:	83 e0       	ldi	r24, 0x03	; 3
 7b8:	07 c0       	rjmp	.+14     	; 0x7c8 <rotaryEncoderdirection+0x2e>
 7ba:	83 e0       	ldi	r24, 0x03	; 3
 7bc:	05 c0       	rjmp	.+10     	; 0x7c8 <rotaryEncoderdirection+0x2e>
 7be:	83 e0       	ldi	r24, 0x03	; 3
 7c0:	03 c0       	rjmp	.+6      	; 0x7c8 <rotaryEncoderdirection+0x2e>
	if(*current_clkstate != *last_clkstate && *current_clkstate == 0){
		uint8_t dt_state = bit_is_set(PIND,DT);
		if(dt_state != *current_clkstate){//clockwise
			//printString("Horario \r\n"); 
			dir = 1;
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	01 c0       	rjmp	.+2      	; 0x7c8 <rotaryEncoderdirection+0x2e>
			
			} 
		else if(dt_state == *current_clkstate){//counterclockwise
			//printString("Antihorario \r\n");
			dir = 2;
 7c6:	82 e0       	ldi	r24, 0x02	; 2
			
			} 
		
	}
	*last_clkstate = *current_clkstate;
 7c8:	fb 01       	movw	r30, r22
 7ca:	90 83       	st	Z, r25

	return dir;
}
 7cc:	08 95       	ret

000007ce <button_pressed>:

//for debouncing purposes
uint8_t button_pressed(){
	if(bit_is_clear(PIND,SW)){
 7ce:	99 b1       	in	r25, 0x09	; 9
 7d0:	89 2f       	mov	r24, r25
 7d2:	80 72       	andi	r24, 0x20	; 32
 7d4:	95 fd       	sbrc	r25, 5
 7d6:	0a c0       	rjmp	.+20     	; 0x7ec <button_pressed+0x1e>
 7d8:	e3 ec       	ldi	r30, 0xC3	; 195
 7da:	f9 e0       	ldi	r31, 0x09	; 9
 7dc:	31 97       	sbiw	r30, 0x01	; 1
 7de:	f1 f7       	brne	.-4      	; 0x7dc <button_pressed+0xe>
 7e0:	00 c0       	rjmp	.+0      	; 0x7e2 <button_pressed+0x14>
 7e2:	00 00       	nop
		_delay_ms(10);
		if(bit_is_clear(PIND,SW)) {return (1);}
 7e4:	4d 99       	sbic	0x09, 5	; 9
 7e6:	03 c0       	rjmp	.+6      	; 0x7ee <button_pressed+0x20>
 7e8:	81 e0       	ldi	r24, 0x01	; 1
 7ea:	08 95       	ret
		
	}
	
	return (0);
 7ec:	80 e0       	ldi	r24, 0x00	; 0
}
 7ee:	08 95       	ret

000007f0 <initTimer_16bit>:

void initTimer_16bit(){
	
	TCCR1B |= (1<<WGM12); //set CTC mode CAPTURE COMPARE
 7f0:	e1 e8       	ldi	r30, 0x81	; 129
 7f2:	f0 e0       	ldi	r31, 0x00	; 0
 7f4:	80 81       	ld	r24, Z
 7f6:	88 60       	ori	r24, 0x08	; 8
 7f8:	80 83       	st	Z, r24
	OCR1A |= 976;
 7fa:	a8 e8       	ldi	r26, 0x88	; 136
 7fc:	b0 e0       	ldi	r27, 0x00	; 0
 7fe:	8d 91       	ld	r24, X+
 800:	9c 91       	ld	r25, X
 802:	11 97       	sbiw	r26, 0x01	; 1
 804:	80 6d       	ori	r24, 0xD0	; 208
 806:	93 60       	ori	r25, 0x03	; 3
 808:	11 96       	adiw	r26, 0x01	; 1
 80a:	9c 93       	st	X, r25
 80c:	8e 93       	st	-X, r24
	TIMSK1 |= (1<<OCIE1A); //enable interrupt
 80e:	af e6       	ldi	r26, 0x6F	; 111
 810:	b0 e0       	ldi	r27, 0x00	; 0
 812:	8c 91       	ld	r24, X
 814:	82 60       	ori	r24, 0x02	; 2
 816:	8c 93       	st	X, r24
	//timer every 0.01 seconds. For one minute it has to reache 6000 the ISR.	
	sei(); //enable global interrupts
 818:	78 94       	sei
	TCCR1B |= (1<<CS12) | (1<<CS10); //set prescaler (CPU clock)/1024, CPUCLOCK by default = 1MHz
 81a:	80 81       	ld	r24, Z
 81c:	85 60       	ori	r24, 0x05	; 5
 81e:	80 83       	st	Z, r24
 820:	08 95       	ret

00000822 <main>:
	
}

int main(void)
{
 822:	cf 93       	push	r28
 824:	df 93       	push	r29
 826:	00 d0       	rcall	.+0      	; 0x828 <main+0x6>
 828:	cd b7       	in	r28, 0x3d	; 61
 82a:	de b7       	in	r29, 0x3e	; 62
	//init external Interrupt on SW
	PCICR |= (1<< PCIE2); //any change in any pin in portd will activate interrupt
 82c:	e8 e6       	ldi	r30, 0x68	; 104
 82e:	f0 e0       	ldi	r31, 0x00	; 0
 830:	80 81       	ld	r24, Z
 832:	84 60       	ori	r24, 0x04	; 4
 834:	80 83       	st	Z, r24
	PCMSK2 |= (1 << SW); //here it is specified which pin from portd will activate interrupt
 836:	ed e6       	ldi	r30, 0x6D	; 109
 838:	f0 e0       	ldi	r31, 0x00	; 0
 83a:	80 81       	ld	r24, Z
 83c:	80 62       	ori	r24, 0x20	; 32
 83e:	80 83       	st	Z, r24
	
	initTimer_16bit(); //every second
 840:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <initTimer_16bit>
	
	initUSART();
 844:	0e 94 4a 02 	call	0x494	; 0x494 <initUSART>
	uint8_t currentStateClk;
	uint8_t lastStateClk;
	uint8_t rotary_direction;
		
	
    for(uint8_t i = 0; i<7; i++){
 848:	20 e0       	ldi	r18, 0x00	; 0
 84a:	0c c0       	rjmp	.+24     	; 0x864 <main+0x42>
		setBit(DDRB,i);
 84c:	34 b1       	in	r19, 0x04	; 4
 84e:	81 e0       	ldi	r24, 0x01	; 1
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	02 2e       	mov	r0, r18
 854:	02 c0       	rjmp	.+4      	; 0x85a <main+0x38>
 856:	88 0f       	add	r24, r24
 858:	99 1f       	adc	r25, r25
 85a:	0a 94       	dec	r0
 85c:	e2 f7       	brpl	.-8      	; 0x856 <main+0x34>
 85e:	83 2b       	or	r24, r19
 860:	84 b9       	out	0x04, r24	; 4
	uint8_t currentStateClk;
	uint8_t lastStateClk;
	uint8_t rotary_direction;
		
	
    for(uint8_t i = 0; i<7; i++){
 862:	2f 5f       	subi	r18, 0xFF	; 255
 864:	27 30       	cpi	r18, 0x07	; 7
 866:	90 f3       	brcs	.-28     	; 0x84c <main+0x2a>
		setBit(DDRB,i);
	}
	setBit(DDRC,PC0); //ten minute
 868:	87 b1       	in	r24, 0x07	; 7
 86a:	81 60       	ori	r24, 0x01	; 1
 86c:	87 b9       	out	0x07, r24	; 7
	setBit(DDRC,PC1); //unit minute
 86e:	87 b1       	in	r24, 0x07	; 7
 870:	82 60       	ori	r24, 0x02	; 2
 872:	87 b9       	out	0x07, r24	; 7
	
	setBit(DDRC,PC2); //ten second
 874:	87 b1       	in	r24, 0x07	; 7
 876:	84 60       	ori	r24, 0x04	; 4
 878:	87 b9       	out	0x07, r24	; 7
	setBit(DDRC,PC3); //unit second
 87a:	87 b1       	in	r24, 0x07	; 7
 87c:	88 60       	ori	r24, 0x08	; 8
 87e:	87 b9       	out	0x07, r24	; 7
	
	setBit(DDRC,PC4); //decimal point
 880:	87 b1       	in	r24, 0x07	; 7
 882:	80 61       	ori	r24, 0x10	; 16
 884:	87 b9       	out	0x07, r24	; 7
	setBit(PORTC,PC4);//deactivate decimal point
 886:	88 b1       	in	r24, 0x08	; 8
 888:	80 61       	ori	r24, 0x10	; 16
 88a:	88 b9       	out	0x08, r24	; 8
	
	setBit(DDRC,PC5); //buzzer
 88c:	87 b1       	in	r24, 0x07	; 7
 88e:	80 62       	ori	r24, 0x20	; 32
 890:	87 b9       	out	0x07, r24	; 7
	
	setBit(DDRD,PD2); //alarm led
 892:	8a b1       	in	r24, 0x0a	; 10
 894:	84 60       	ori	r24, 0x04	; 4
 896:	8a b9       	out	0x0a, r24	; 10
	
	
	clearBit(DDRD,DT); //input
 898:	8a b1       	in	r24, 0x0a	; 10
 89a:	8f 7b       	andi	r24, 0xBF	; 191
 89c:	8a b9       	out	0x0a, r24	; 10
	clearBit(DDRD,CLK); //input
 89e:	8a b1       	in	r24, 0x0a	; 10
 8a0:	8f 77       	andi	r24, 0x7F	; 127
 8a2:	8a b9       	out	0x0a, r24	; 10
	clearBit(DDRD,SW); //switch if pressed a 0 is read
 8a4:	8a b1       	in	r24, 0x0a	; 10
 8a6:	8f 7d       	andi	r24, 0xDF	; 223
 8a8:	8a b9       	out	0x0a, r24	; 10
	
	lastStateClk = bit_is_set(PIND,CLK); //return non zero if bit is clear. 0 if bit is set
 8aa:	89 b1       	in	r24, 0x09	; 9
 8ac:	80 78       	andi	r24, 0x80	; 128
 8ae:	8a 83       	std	Y+2, r24	; 0x02

    while (1) 
    {

		//Configurate Minutes
		if(button_pressed() && !was_sleeping){
 8b0:	0e 94 e7 03 	call	0x7ce	; 0x7ce <button_pressed>
 8b4:	88 23       	and	r24, r24
 8b6:	09 f4       	brne	.+2      	; 0x8ba <main+0x98>
 8b8:	e7 c0       	rjmp	.+462    	; 0xa88 <main+0x266>
 8ba:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <was_sleeping>
 8be:	81 11       	cpse	r24, r1
 8c0:	e3 c0       	rjmp	.+454    	; 0xa88 <main+0x266>
			button_layer++; //layer 1
 8c2:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <button_layer>
 8c6:	8f 5f       	subi	r24, 0xFF	; 255
 8c8:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <button_layer>
 8cc:	2f e9       	ldi	r18, 0x9F	; 159
 8ce:	86 e8       	ldi	r24, 0x86	; 134
 8d0:	91 e0       	ldi	r25, 0x01	; 1
 8d2:	21 50       	subi	r18, 0x01	; 1
 8d4:	80 40       	sbci	r24, 0x00	; 0
 8d6:	90 40       	sbci	r25, 0x00	; 0
 8d8:	e1 f7       	brne	.-8      	; 0x8d2 <main+0xb0>
 8da:	00 c0       	rjmp	.+0      	; 0x8dc <main+0xba>
 8dc:	00 00       	nop
 8de:	ca c0       	rjmp	.+404    	; 0xa74 <main+0x252>
			_delay_ms(500);//for stabilisation
			while(button_layer == 1){
				
				//Display Minutes, seconds won't be shown
					setBit(PORTC,PC0);
 8e0:	88 b1       	in	r24, 0x08	; 8
 8e2:	81 60       	ori	r24, 0x01	; 1
 8e4:	88 b9       	out	0x08, r24	; 8
					SevSeg_display_digit(&PORTB,ten_min);
 8e6:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <__data_end>
 8ea:	85 e2       	ldi	r24, 0x25	; 37
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	0e 94 76 00 	call	0xec	; 0xec <SevSeg_display_digit>
 8f2:	89 ef       	ldi	r24, 0xF9	; 249
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	01 97       	sbiw	r24, 0x01	; 1
 8f8:	f1 f7       	brne	.-4      	; 0x8f6 <main+0xd4>
 8fa:	00 c0       	rjmp	.+0      	; 0x8fc <main+0xda>
 8fc:	00 00       	nop
					_delay_ms(1);
					SevSeg_clear(&PORTB);
 8fe:	85 e2       	ldi	r24, 0x25	; 37
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	0e 94 38 02 	call	0x470	; 0x470 <SevSeg_clear>
					clearBit(PORTC,PC0);
 906:	88 b1       	in	r24, 0x08	; 8
 908:	8e 7f       	andi	r24, 0xFE	; 254
 90a:	88 b9       	out	0x08, r24	; 8
							
					setBit(PORTC,PC1);
 90c:	88 b1       	in	r24, 0x08	; 8
 90e:	82 60       	ori	r24, 0x02	; 2
 910:	88 b9       	out	0x08, r24	; 8
					SevSeg_display_digit(&PORTB,unit_min);
 912:	60 91 57 01 	lds	r22, 0x0157	; 0x800157 <unit_min>
 916:	85 e2       	ldi	r24, 0x25	; 37
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	0e 94 76 00 	call	0xec	; 0xec <SevSeg_display_digit>
					clearBit(PORTC,PC4);// activate decimal point
 91e:	88 b1       	in	r24, 0x08	; 8
 920:	8f 7e       	andi	r24, 0xEF	; 239
 922:	88 b9       	out	0x08, r24	; 8
 924:	89 ef       	ldi	r24, 0xF9	; 249
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	01 97       	sbiw	r24, 0x01	; 1
 92a:	f1 f7       	brne	.-4      	; 0x928 <main+0x106>
 92c:	00 c0       	rjmp	.+0      	; 0x92e <main+0x10c>
 92e:	00 00       	nop
					_delay_ms(1);
					setBit(PORTC,PC4);// deactivate decimal point
 930:	88 b1       	in	r24, 0x08	; 8
 932:	80 61       	ori	r24, 0x10	; 16
 934:	88 b9       	out	0x08, r24	; 8
					SevSeg_clear(&PORTB);
 936:	85 e2       	ldi	r24, 0x25	; 37
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	0e 94 38 02 	call	0x470	; 0x470 <SevSeg_clear>
					clearBit(PORTC,PC1);
 93e:	88 b1       	in	r24, 0x08	; 8
 940:	8d 7f       	andi	r24, 0xFD	; 253
 942:	88 b9       	out	0x08, r24	; 8
				///////////////////			
				
				currentStateClk = bit_is_set(PIND,CLK);
 944:	89 b1       	in	r24, 0x09	; 9
 946:	80 78       	andi	r24, 0x80	; 128
 948:	89 83       	std	Y+1, r24	; 0x01

				rotary_direction = rotaryEncoderdirection(&currentStateClk,&lastStateClk);
 94a:	be 01       	movw	r22, r28
 94c:	6e 5f       	subi	r22, 0xFE	; 254
 94e:	7f 4f       	sbci	r23, 0xFF	; 255
 950:	ce 01       	movw	r24, r28
 952:	01 96       	adiw	r24, 0x01	; 1
 954:	0e 94 cd 03 	call	0x79a	; 0x79a <rotaryEncoderdirection>
				//Clockwise
				if(rotary_direction == 1 ){
 958:	81 30       	cpi	r24, 0x01	; 1
 95a:	61 f4       	brne	.+24     	; 0x974 <main+0x152>
					unit_min++;
 95c:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <unit_min>
 960:	8f 5f       	subi	r24, 0xFF	; 255
 962:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <unit_min>
					UpDownCounterMinute(&unit_min, &ten_min);
 966:	66 e5       	ldi	r22, 0x56	; 86
 968:	71 e0       	ldi	r23, 0x01	; 1
 96a:	87 e5       	ldi	r24, 0x57	; 87
 96c:	91 e0       	ldi	r25, 0x01	; 1
 96e:	0e 94 0e 03 	call	0x61c	; 0x61c <UpDownCounterMinute>
 972:	0d c0       	rjmp	.+26     	; 0x98e <main+0x16c>
					} 
				//CounterClockwise
				else if(rotary_direction == 2){
 974:	82 30       	cpi	r24, 0x02	; 2
 976:	59 f4       	brne	.+22     	; 0x98e <main+0x16c>
					unit_min--;
 978:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <unit_min>
 97c:	81 50       	subi	r24, 0x01	; 1
 97e:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <unit_min>
					UpDownCounterMinute(&unit_min, &ten_min);					
 982:	66 e5       	ldi	r22, 0x56	; 86
 984:	71 e0       	ldi	r23, 0x01	; 1
 986:	87 e5       	ldi	r24, 0x57	; 87
 988:	91 e0       	ldi	r25, 0x01	; 1
 98a:	0e 94 0e 03 	call	0x61c	; 0x61c <UpDownCounterMinute>
					}
				//Configurate Seconds
				if(button_pressed()){
 98e:	0e 94 e7 03 	call	0x7ce	; 0x7ce <button_pressed>
 992:	88 23       	and	r24, r24
 994:	09 f4       	brne	.+2      	; 0x998 <main+0x176>
 996:	6e c0       	rjmp	.+220    	; 0xa74 <main+0x252>
					button_layer++; //layer 2
 998:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <button_layer>
 99c:	8f 5f       	subi	r24, 0xFF	; 255
 99e:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <button_layer>
 9a2:	9f e9       	ldi	r25, 0x9F	; 159
 9a4:	26 e8       	ldi	r18, 0x86	; 134
 9a6:	81 e0       	ldi	r24, 0x01	; 1
 9a8:	91 50       	subi	r25, 0x01	; 1
 9aa:	20 40       	sbci	r18, 0x00	; 0
 9ac:	80 40       	sbci	r24, 0x00	; 0
 9ae:	e1 f7       	brne	.-8      	; 0x9a8 <main+0x186>
 9b0:	00 c0       	rjmp	.+0      	; 0x9b2 <main+0x190>
 9b2:	00 00       	nop
 9b4:	5a c0       	rjmp	.+180    	; 0xa6a <main+0x248>
					_delay_ms(500);
					while(button_layer == 2){
					
						//Display Seconds, Minutes won't be shown
						setBit(PORTC,PC2);
 9b6:	88 b1       	in	r24, 0x08	; 8
 9b8:	84 60       	ori	r24, 0x04	; 4
 9ba:	88 b9       	out	0x08, r24	; 8
						SevSeg_display_digit(&PORTB,ten_sec);
 9bc:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <ten_sec>
 9c0:	85 e2       	ldi	r24, 0x25	; 37
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	0e 94 76 00 	call	0xec	; 0xec <SevSeg_display_digit>
 9c8:	89 ef       	ldi	r24, 0xF9	; 249
 9ca:	90 e0       	ldi	r25, 0x00	; 0
 9cc:	01 97       	sbiw	r24, 0x01	; 1
 9ce:	f1 f7       	brne	.-4      	; 0x9cc <main+0x1aa>
 9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <main+0x1b0>
 9d2:	00 00       	nop
						_delay_ms(1);
						SevSeg_clear(&PORTB);
 9d4:	85 e2       	ldi	r24, 0x25	; 37
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	0e 94 38 02 	call	0x470	; 0x470 <SevSeg_clear>
						clearBit(PORTC,PC2);
 9dc:	88 b1       	in	r24, 0x08	; 8
 9de:	8b 7f       	andi	r24, 0xFB	; 251
 9e0:	88 b9       	out	0x08, r24	; 8
					
						setBit(PORTC,PC3);
 9e2:	88 b1       	in	r24, 0x08	; 8
 9e4:	88 60       	ori	r24, 0x08	; 8
 9e6:	88 b9       	out	0x08, r24	; 8
						SevSeg_display_digit(&PORTB,unit_sec);
 9e8:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <unit_sec>
 9ec:	85 e2       	ldi	r24, 0x25	; 37
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	0e 94 76 00 	call	0xec	; 0xec <SevSeg_display_digit>
 9f4:	89 ef       	ldi	r24, 0xF9	; 249
 9f6:	90 e0       	ldi	r25, 0x00	; 0
 9f8:	01 97       	sbiw	r24, 0x01	; 1
 9fa:	f1 f7       	brne	.-4      	; 0x9f8 <main+0x1d6>
 9fc:	00 c0       	rjmp	.+0      	; 0x9fe <main+0x1dc>
 9fe:	00 00       	nop
						_delay_ms(1);
						SevSeg_clear(&PORTB);
 a00:	85 e2       	ldi	r24, 0x25	; 37
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	0e 94 38 02 	call	0x470	; 0x470 <SevSeg_clear>
						clearBit(PORTC,PC3);
 a08:	88 b1       	in	r24, 0x08	; 8
 a0a:	87 7f       	andi	r24, 0xF7	; 247
 a0c:	88 b9       	out	0x08, r24	; 8
						////////////////////////////
						currentStateClk = bit_is_set(PIND,CLK);
 a0e:	89 b1       	in	r24, 0x09	; 9
 a10:	80 78       	andi	r24, 0x80	; 128
 a12:	89 83       	std	Y+1, r24	; 0x01

						rotary_direction = rotaryEncoderdirection(&currentStateClk,&lastStateClk);
 a14:	be 01       	movw	r22, r28
 a16:	6e 5f       	subi	r22, 0xFE	; 254
 a18:	7f 4f       	sbci	r23, 0xFF	; 255
 a1a:	ce 01       	movw	r24, r28
 a1c:	01 96       	adiw	r24, 0x01	; 1
 a1e:	0e 94 cd 03 	call	0x79a	; 0x79a <rotaryEncoderdirection>
						//Clockwise
						if(rotary_direction == 1 ){
 a22:	81 30       	cpi	r24, 0x01	; 1
 a24:	61 f4       	brne	.+24     	; 0xa3e <main+0x21c>
							unit_sec++;
 a26:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <unit_sec>
 a2a:	8f 5f       	subi	r24, 0xFF	; 255
 a2c:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <unit_sec>
							UpDownCounterMinute(&unit_sec, &ten_sec);
 a30:	68 e5       	ldi	r22, 0x58	; 88
 a32:	71 e0       	ldi	r23, 0x01	; 1
 a34:	89 e5       	ldi	r24, 0x59	; 89
 a36:	91 e0       	ldi	r25, 0x01	; 1
 a38:	0e 94 0e 03 	call	0x61c	; 0x61c <UpDownCounterMinute>
 a3c:	0d c0       	rjmp	.+26     	; 0xa58 <main+0x236>

						}
						//CounterClockwise
						else if(rotary_direction == 2){
 a3e:	82 30       	cpi	r24, 0x02	; 2
 a40:	59 f4       	brne	.+22     	; 0xa58 <main+0x236>
							unit_sec--;
 a42:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <unit_sec>
 a46:	81 50       	subi	r24, 0x01	; 1
 a48:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <unit_sec>
							UpDownCounterMinute(&unit_sec, &ten_sec);						
 a4c:	68 e5       	ldi	r22, 0x58	; 88
 a4e:	71 e0       	ldi	r23, 0x01	; 1
 a50:	89 e5       	ldi	r24, 0x59	; 89
 a52:	91 e0       	ldi	r25, 0x01	; 1
 a54:	0e 94 0e 03 	call	0x61c	; 0x61c <UpDownCounterMinute>
						}
						if(button_pressed()) button_layer++; //layer 3				
 a58:	0e 94 e7 03 	call	0x7ce	; 0x7ce <button_pressed>
 a5c:	88 23       	and	r24, r24
 a5e:	29 f0       	breq	.+10     	; 0xa6a <main+0x248>
 a60:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <button_layer>
 a64:	8f 5f       	subi	r24, 0xFF	; 255
 a66:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <button_layer>
					}
				//Configurate Seconds
				if(button_pressed()){
					button_layer++; //layer 2
					_delay_ms(500);
					while(button_layer == 2){
 a6a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <button_layer>
 a6e:	82 30       	cpi	r24, 0x02	; 2
 a70:	09 f4       	brne	.+2      	; 0xa74 <main+0x252>
 a72:	a1 cf       	rjmp	.-190    	; 0x9b6 <main+0x194>

		//Configurate Minutes
		if(button_pressed() && !was_sleeping){
			button_layer++; //layer 1
			_delay_ms(500);//for stabilisation
			while(button_layer == 1){
 a74:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <button_layer>
 a78:	81 30       	cpi	r24, 0x01	; 1
 a7a:	09 f4       	brne	.+2      	; 0xa7e <main+0x25c>
 a7c:	31 cf       	rjmp	.-414    	; 0x8e0 <main+0xbe>
	
				
				
			}

			alarm_is_set = true; //activate alarm
 a7e:	81 e0       	ldi	r24, 0x01	; 1
 a80:	80 93 5b 01 	sts	0x015B, r24	; 0x80015b <alarm_is_set>
			button_layer = 0;
 a84:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <button_layer>
 a88:	83 ec       	ldi	r24, 0xC3	; 195
 a8a:	99 e0       	ldi	r25, 0x09	; 9
 a8c:	01 97       	sbiw	r24, 0x01	; 1
 a8e:	f1 f7       	brne	.-4      	; 0xa8c <main+0x26a>
 a90:	00 c0       	rjmp	.+0      	; 0xa92 <main+0x270>
 a92:	00 00       	nop
 a94:	64 c0       	rjmp	.+200    	; 0xb5e <main+0x33c>

		_delay_ms(10);
		
	/*if*/while(alarm_is_set){
		
			alarm_countdown(&ten_min,&unit_min,&ten_sec,&unit_sec); //keep here always before updowncountersecond function
 a96:	29 e5       	ldi	r18, 0x59	; 89
 a98:	31 e0       	ldi	r19, 0x01	; 1
 a9a:	48 e5       	ldi	r20, 0x58	; 88
 a9c:	51 e0       	ldi	r21, 0x01	; 1
 a9e:	67 e5       	ldi	r22, 0x57	; 87
 aa0:	71 e0       	ldi	r23, 0x01	; 1
 aa2:	86 e5       	ldi	r24, 0x56	; 86
 aa4:	91 e0       	ldi	r25, 0x01	; 1
 aa6:	0e 94 60 03 	call	0x6c0	; 0x6c0 <alarm_countdown>
			UpDownCounterSecond(&unit_sec, &ten_sec,&unit_min);
 aaa:	47 e5       	ldi	r20, 0x57	; 87
 aac:	51 e0       	ldi	r21, 0x01	; 1
 aae:	68 e5       	ldi	r22, 0x58	; 88
 ab0:	71 e0       	ldi	r23, 0x01	; 1
 ab2:	89 e5       	ldi	r24, 0x59	; 89
 ab4:	91 e0       	ldi	r25, 0x01	; 1
 ab6:	0e 94 31 03 	call	0x662	; 0x662 <UpDownCounterSecond>
			UpDownCounterMinute(&unit_min, &ten_min);
 aba:	66 e5       	ldi	r22, 0x56	; 86
 abc:	71 e0       	ldi	r23, 0x01	; 1
 abe:	87 e5       	ldi	r24, 0x57	; 87
 ac0:	91 e0       	ldi	r25, 0x01	; 1
 ac2:	0e 94 0e 03 	call	0x61c	; 0x61c <UpDownCounterMinute>

	
			if((ten_min + unit_min + ten_sec + unit_sec) == 0 ){
 ac6:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <__data_end>
 aca:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <unit_min>
 ace:	08 2e       	mov	r0, r24
 ad0:	00 0c       	add	r0, r0
 ad2:	99 0b       	sbc	r25, r25
 ad4:	82 0f       	add	r24, r18
 ad6:	91 1d       	adc	r25, r1
 ad8:	27 fd       	sbrc	r18, 7
 ada:	9a 95       	dec	r25
 adc:	20 91 58 01 	lds	r18, 0x0158	; 0x800158 <ten_sec>
 ae0:	82 0f       	add	r24, r18
 ae2:	91 1d       	adc	r25, r1
 ae4:	27 fd       	sbrc	r18, 7
 ae6:	9a 95       	dec	r25
 ae8:	20 91 59 01 	lds	r18, 0x0159	; 0x800159 <unit_sec>
 aec:	82 0f       	add	r24, r18
 aee:	91 1d       	adc	r25, r1
 af0:	27 fd       	sbrc	r18, 7
 af2:	9a 95       	dec	r25
 af4:	89 2b       	or	r24, r25
 af6:	99 f5       	brne	.+102    	; 0xb5e <main+0x33c>
				beep_activated = true;
 af8:	81 e0       	ldi	r24, 0x01	; 1
 afa:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <beep_activated>
				while(beep_activated){
 afe:	1c c0       	rjmp	.+56     	; 0xb38 <main+0x316>
					setBit(PORTD,PD2);		
 b00:	8b b1       	in	r24, 0x0b	; 11
 b02:	84 60       	ori	r24, 0x04	; 4
 b04:	8b b9       	out	0x0b, r24	; 11
					buzzer_peep(&PORTC,PC5);
 b06:	65 e0       	ldi	r22, 0x05	; 5
 b08:	88 e2       	ldi	r24, 0x28	; 40
 b0a:	90 e0       	ldi	r25, 0x00	; 0
 b0c:	0e 94 5d 00 	call	0xba	; 0xba <buzzer_peep>
 b10:	8f e4       	ldi	r24, 0x4F	; 79
 b12:	93 ec       	ldi	r25, 0xC3	; 195
 b14:	01 97       	sbiw	r24, 0x01	; 1
 b16:	f1 f7       	brne	.-4      	; 0xb14 <main+0x2f2>
 b18:	00 c0       	rjmp	.+0      	; 0xb1a <main+0x2f8>
 b1a:	00 00       	nop
					_delay_ms(200);
					clearBit(PORTD,PD2);
 b1c:	8b b1       	in	r24, 0x0b	; 11
 b1e:	8b 7f       	andi	r24, 0xFB	; 251
 b20:	8b b9       	out	0x0b, r24	; 11
					buzzer_stop(&PORTC,PC5);
 b22:	65 e0       	ldi	r22, 0x05	; 5
 b24:	88 e2       	ldi	r24, 0x28	; 40
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	0e 94 69 00 	call	0xd2	; 0xd2 <buzzer_stop>
 b2c:	8f e4       	ldi	r24, 0x4F	; 79
 b2e:	93 ec       	ldi	r25, 0xC3	; 195
 b30:	01 97       	sbiw	r24, 0x01	; 1
 b32:	f1 f7       	brne	.-4      	; 0xb30 <main+0x30e>
 b34:	00 c0       	rjmp	.+0      	; 0xb36 <main+0x314>
 b36:	00 00       	nop
			UpDownCounterMinute(&unit_min, &ten_min);

	
			if((ten_min + unit_min + ten_sec + unit_sec) == 0 ){
				beep_activated = true;
				while(beep_activated){
 b38:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <beep_activated>
 b3c:	81 11       	cpse	r24, r1
 b3e:	e0 cf       	rjmp	.-64     	; 0xb00 <main+0x2de>
					_delay_ms(200);
					clearBit(PORTD,PD2);
					buzzer_stop(&PORTC,PC5);
					_delay_ms(200);
				}
				COUNTER_TIMEOUT = 0;
 b40:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <COUNTER_TIMEOUT+0x1>
 b44:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <COUNTER_TIMEOUT>
				//unit_sec = 1;
				alarm_is_set = false; //deactivate alarm
 b48:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <alarm_is_set>
 b4c:	9f eb       	ldi	r25, 0xBF	; 191
 b4e:	24 ed       	ldi	r18, 0xD4	; 212
 b50:	81 e0       	ldi	r24, 0x01	; 1
 b52:	91 50       	subi	r25, 0x01	; 1
 b54:	20 40       	sbci	r18, 0x00	; 0
 b56:	80 40       	sbci	r24, 0x00	; 0
 b58:	e1 f7       	brne	.-8      	; 0xb52 <main+0x330>
 b5a:	00 c0       	rjmp	.+0      	; 0xb5c <main+0x33a>
 b5c:	00 00       	nop
		}
	

		_delay_ms(10);
		
	/*if*/while(alarm_is_set){
 b5e:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <alarm_is_set>
 b62:	81 11       	cpse	r24, r1
 b64:	98 cf       	rjmp	.-208    	; 0xa96 <main+0x274>
				_delay_ms(600);	
			}
		
		}
		
  /*else if*/ if(!alarm_is_set){
 b66:	81 11       	cpse	r24, r1
 b68:	a3 ce       	rjmp	.-698    	; 0x8b0 <main+0x8e>
			if(was_sleeping){_delay_ms(500);was_sleeping = 0;}
 b6a:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <was_sleeping>
 b6e:	88 23       	and	r24, r24
 b70:	59 f0       	breq	.+22     	; 0xb88 <main+0x366>
 b72:	9f e9       	ldi	r25, 0x9F	; 159
 b74:	26 e8       	ldi	r18, 0x86	; 134
 b76:	81 e0       	ldi	r24, 0x01	; 1
 b78:	91 50       	subi	r25, 0x01	; 1
 b7a:	20 40       	sbci	r18, 0x00	; 0
 b7c:	80 40       	sbci	r24, 0x00	; 0
 b7e:	e1 f7       	brne	.-8      	; 0xb78 <main+0x356>
 b80:	00 c0       	rjmp	.+0      	; 0xb82 <main+0x360>
 b82:	00 00       	nop
 b84:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <was_sleeping>
				
			setBit(PORTC,PC2);
 b88:	88 b1       	in	r24, 0x08	; 8
 b8a:	84 60       	ori	r24, 0x04	; 4
 b8c:	88 b9       	out	0x08, r24	; 8
			SevSeg_display_digit(&PORTB,ten_sec);
 b8e:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <ten_sec>
 b92:	85 e2       	ldi	r24, 0x25	; 37
 b94:	90 e0       	ldi	r25, 0x00	; 0
 b96:	0e 94 76 00 	call	0xec	; 0xec <SevSeg_display_digit>
 b9a:	89 ef       	ldi	r24, 0xF9	; 249
 b9c:	90 e0       	ldi	r25, 0x00	; 0
 b9e:	01 97       	sbiw	r24, 0x01	; 1
 ba0:	f1 f7       	brne	.-4      	; 0xb9e <main+0x37c>
 ba2:	00 c0       	rjmp	.+0      	; 0xba4 <main+0x382>
 ba4:	00 00       	nop
			_delay_ms(1);
			SevSeg_clear(&PORTB);
 ba6:	85 e2       	ldi	r24, 0x25	; 37
 ba8:	90 e0       	ldi	r25, 0x00	; 0
 baa:	0e 94 38 02 	call	0x470	; 0x470 <SevSeg_clear>
			clearBit(PORTC,PC2);
 bae:	88 b1       	in	r24, 0x08	; 8
 bb0:	8b 7f       	andi	r24, 0xFB	; 251
 bb2:	88 b9       	out	0x08, r24	; 8
					
			setBit(PORTC,PC3);
 bb4:	88 b1       	in	r24, 0x08	; 8
 bb6:	88 60       	ori	r24, 0x08	; 8
 bb8:	88 b9       	out	0x08, r24	; 8
			SevSeg_display_digit(&PORTB,unit_sec);
 bba:	60 91 59 01 	lds	r22, 0x0159	; 0x800159 <unit_sec>
 bbe:	85 e2       	ldi	r24, 0x25	; 37
 bc0:	90 e0       	ldi	r25, 0x00	; 0
 bc2:	0e 94 76 00 	call	0xec	; 0xec <SevSeg_display_digit>
 bc6:	89 ef       	ldi	r24, 0xF9	; 249
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	01 97       	sbiw	r24, 0x01	; 1
 bcc:	f1 f7       	brne	.-4      	; 0xbca <main+0x3a8>
 bce:	00 c0       	rjmp	.+0      	; 0xbd0 <main+0x3ae>
 bd0:	00 00       	nop
			_delay_ms(1);
			SevSeg_clear(&PORTB);
 bd2:	85 e2       	ldi	r24, 0x25	; 37
 bd4:	90 e0       	ldi	r25, 0x00	; 0
 bd6:	0e 94 38 02 	call	0x470	; 0x470 <SevSeg_clear>
			clearBit(PORTC,PC3);
 bda:	88 b1       	in	r24, 0x08	; 8
 bdc:	87 7f       	andi	r24, 0xF7	; 247
 bde:	88 b9       	out	0x08, r24	; 8
						
			setBit(PORTC,PC0);
 be0:	88 b1       	in	r24, 0x08	; 8
 be2:	81 60       	ori	r24, 0x01	; 1
 be4:	88 b9       	out	0x08, r24	; 8
			SevSeg_display_digit(&PORTB,ten_min);
 be6:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <__data_end>
 bea:	85 e2       	ldi	r24, 0x25	; 37
 bec:	90 e0       	ldi	r25, 0x00	; 0
 bee:	0e 94 76 00 	call	0xec	; 0xec <SevSeg_display_digit>
 bf2:	89 ef       	ldi	r24, 0xF9	; 249
 bf4:	90 e0       	ldi	r25, 0x00	; 0
 bf6:	01 97       	sbiw	r24, 0x01	; 1
 bf8:	f1 f7       	brne	.-4      	; 0xbf6 <main+0x3d4>
 bfa:	00 c0       	rjmp	.+0      	; 0xbfc <main+0x3da>
 bfc:	00 00       	nop
			_delay_ms(1);
			SevSeg_clear(&PORTB);
 bfe:	85 e2       	ldi	r24, 0x25	; 37
 c00:	90 e0       	ldi	r25, 0x00	; 0
 c02:	0e 94 38 02 	call	0x470	; 0x470 <SevSeg_clear>
			clearBit(PORTC,PC0);
 c06:	88 b1       	in	r24, 0x08	; 8
 c08:	8e 7f       	andi	r24, 0xFE	; 254
 c0a:	88 b9       	out	0x08, r24	; 8
						
			setBit(PORTC,PC1);
 c0c:	88 b1       	in	r24, 0x08	; 8
 c0e:	82 60       	ori	r24, 0x02	; 2
 c10:	88 b9       	out	0x08, r24	; 8
			SevSeg_display_digit(&PORTB,unit_min);
 c12:	60 91 57 01 	lds	r22, 0x0157	; 0x800157 <unit_min>
 c16:	85 e2       	ldi	r24, 0x25	; 37
 c18:	90 e0       	ldi	r25, 0x00	; 0
 c1a:	0e 94 76 00 	call	0xec	; 0xec <SevSeg_display_digit>
			clearBit(PORTC,PC4);// activate decimal point
 c1e:	88 b1       	in	r24, 0x08	; 8
 c20:	8f 7e       	andi	r24, 0xEF	; 239
 c22:	88 b9       	out	0x08, r24	; 8
 c24:	89 ef       	ldi	r24, 0xF9	; 249
 c26:	90 e0       	ldi	r25, 0x00	; 0
 c28:	01 97       	sbiw	r24, 0x01	; 1
 c2a:	f1 f7       	brne	.-4      	; 0xc28 <main+0x406>
 c2c:	00 c0       	rjmp	.+0      	; 0xc2e <main+0x40c>
 c2e:	00 00       	nop
			_delay_ms(1);
			setBit(PORTC,PC4); //deactivate decimal point
 c30:	88 b1       	in	r24, 0x08	; 8
 c32:	80 61       	ori	r24, 0x10	; 16
 c34:	88 b9       	out	0x08, r24	; 8
			SevSeg_clear(&PORTB);
 c36:	85 e2       	ldi	r24, 0x25	; 37
 c38:	90 e0       	ldi	r25, 0x00	; 0
 c3a:	0e 94 38 02 	call	0x470	; 0x470 <SevSeg_clear>
			clearBit(PORTC,PC1);
 c3e:	88 b1       	in	r24, 0x08	; 8
 c40:	8d 7f       	andi	r24, 0xFD	; 253
 c42:	88 b9       	out	0x08, r24	; 8
 c44:	35 ce       	rjmp	.-918    	; 0x8b0 <main+0x8e>

00000c46 <__tablejump2__>:
 c46:	ee 0f       	add	r30, r30
 c48:	ff 1f       	adc	r31, r31
 c4a:	05 90       	lpm	r0, Z+
 c4c:	f4 91       	lpm	r31, Z
 c4e:	e0 2d       	mov	r30, r0
 c50:	09 94       	ijmp

00000c52 <_exit>:
 c52:	f8 94       	cli

00000c54 <__stop_program>:
 c54:	ff cf       	rjmp	.-2      	; 0xc54 <__stop_program>
